<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://dlfelps.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dlfelps.github.io/" rel="alternate" type="text/html" /><updated>2022-11-18T19:12:26+00:00</updated><id>https://dlfelps.github.io/feed.xml</id><title type="html">.NET Experiments</title><subtitle>Bill Nye meets Bill Gates ;)</subtitle><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><entry><title type="html">Experiment 09</title><link href="https://dlfelps.github.io/2022/11/01/inclusive.html" rel="alternate" type="text/html" title="Experiment 09" /><published>2022-11-01T00:00:00+00:00</published><updated>2022-11-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/11/01/inclusive</id><content type="html" xml:base="https://dlfelps.github.io/2022/11/01/inclusive.html"><![CDATA[<p>This post explores the possibility of using <em>inclusive</em> programming languages, i.e. ones that successfully accommodate functional and object-oriented programming styles in a single codebase.</p>

<h2 id="introduction">Introduction</h2>

<p>Python, C++, Java, and C# are 4 out of the top 10 most popular languages on any survey/poll/list, and they have one thing in common - they are all primarily object-oriented languages. This paradigm is characterized by<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p>

<ul>
  <li>Data/operations are encapsulated in objects</li>
  <li>Information hiding is used to protect internal properties of an object</li>
  <li>Objects interact by means of message passing</li>
  <li>Classes are organized in inheritance hierarchies</li>
</ul>

<p>But even these classic languages are now including new features to support a more functional programming style; some people see this as a sign of an upcoming paradigm shift<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. My thoughts are more in line with Richard Feldman who argued in his talk <a href="https://youtu.be/QyJZzq0v7Z4?t=2319">“Why isn’t functional programming the norm?”</a> that we are currently undergoing an intermediate phase where we are starting to apply functional programming techniques within object-oriented languages. This post uses 5 criteria to find suitable languages that align to this goal.</p>

<h2 id="inclusive-programming-criteria">Inclusive programming criteria</h2>

<p>The ideal inclusive language is one that allows each individual within a team to follow their preferred programming style (i.e. object-oriented or functional) within a single codebase. Alas, no such language exists. We next examine the critical elements necessary to provide successful collaboration between these unique programming styles. These elements are used to <strong>support</strong> and <strong>identify</strong> each paradigm.</p>

<blockquote>
  <p>This concept is distinct from that of <a href="https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Multiparadigm_languages">multiparadigm languages</a>. The primary difference being that while multiparadigm languages might support more than one paradigm, they may not necessarily be well-suited to support more than one paradigm within a single codebase.</p>
</blockquote>

<h3 id="criteria-to-support-an-object-oriented-paradigm">Criteria to support an object-oriented paradigm</h3>

<p>I identify 3 properties that I believe are essential for any object-oriented programmer to feel at home in a language:</p>

<blockquote>
  <p>O1. classes with methods and properties</p>

  <p>O2. encapsulation (i.e. the ability to hide data/methods)</p>

  <p>O3. subtype polymorphism (subtyping)</p>
</blockquote>

<p>Encapsulation and subtyping<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> are necessary to apply common design patterns; they also allow programmers to adhere to guiding principles that are well-known within their community. For example, subtyping enables both the “O” and “L” in <a href="https://stackify.com/solid-design-principles/">S<strong>OL</strong>ID design principles</a>.</p>

<p>This relatively minimal subset of language features doesn’t narrow our options much yet; let’s discuss the elements critical to functional programming.</p>

<h3 id="criteria-to-support-a-functional-paradigm">Criteria to support a functional paradigm</h3>

<p>The two most defining features of the functional programming style are pure functions<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> <sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>and immutable data. But these strategies do not require any special language features. One criteria that is often needed to support functional programming is that functions are treated as first-class citizens<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>.</p>

<blockquote>
  <p>F1. functions are first-class</p>
</blockquote>

<p>Most modern languages treat functions as first-class citizens.</p>

<h3 id="criteria-to-identify-each-paradigm">Criteria to identify each paradigm</h3>

<p>To properly meet our definition of <em>inclusive</em> we must also be able to identify which programming paradigm a particular piece of code follows.</p>

<p>How do you identify object-oriented code? This paradigm is full of easy to spot code smells:</p>
<ul>
  <li>classes</li>
  <li><code class="language-plaintext highlighter-rouge">for</code> loops</li>
  <li>mutable variables</li>
</ul>

<p>How do you identify functional code? At a glance it may be difficult to pin down functional code, but here are a few things to look for:</p>
<ul>
  <li>no classes</li>
  <li>no <code class="language-plaintext highlighter-rouge">for</code> loops</li>
  <li>no mutable variables</li>
  <li>lots of functions</li>
</ul>

<p>Classes and <code class="language-plaintext highlighter-rouge">for</code> loops are easy enough to spot, but what about mutable variables? In order to facilitate this distinction, we add the following criteria:</p>

<blockquote>
  <p>C1. mutable variables must be designated as such</p>
</blockquote>

<p>This final criteria drastically narrows down the field. The remaining<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup> contenders that make our list of inclusive languages are: Kotlin, Scala, Rust, Swift. Let’s briefly examine how each language meets the criteria.</p>

<h2 id="inclusive-languages">Inclusive languages</h2>

<p>This section is included to show how each of the languages meet the inclusive criteria. You may choose to skip it.</p>

<h3 id="kotlin">Kotlin</h3>

<blockquote>
  <p><a href="https://kotlinlang.org/">Kotlin</a> is a “modern programming language that makes developers happier.”</p>
</blockquote>

<ul>
  <li>O1 - has regular classes (plus enums, data classes, and sealed classes)</li>
  <li>O2 - class properties/methods can be made <code class="language-plaintext highlighter-rouge">private</code></li>
  <li>O3 - uses interfaces for creating subtypes</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - immutable variables are initialized with <code class="language-plaintext highlighter-rouge">val</code>; mutable variables are initialized with <code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<h3 id="scala">Scala</h3>

<blockquote>
  <p>“<a href="https://www.scala-lang.org/">Scala</a> combines object-oriented and functional programming in one concise, high-level language.”</p>
</blockquote>

<ul>
  <li>O1 - has regular classes (plus enums and case classes)</li>
  <li>O2 - class properties/methods can be made <code class="language-plaintext highlighter-rouge">private</code></li>
  <li>O3 - uses interfaces for creating subtypes (with mixin composition to compose components)</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - immutable variables are initialized with <code class="language-plaintext highlighter-rouge">val</code>; mutable variables are initialized with <code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<h3 id="rust">Rust</h3>

<blockquote>
  <p><a href="https://www.rust-lang.org/">Rust</a> is a “language empowering everyone to build reliable and efficient software.”</p>
</blockquote>

<ul>
  <li>O1 - has structs with implementation methods</li>
  <li>O2 - everything is <code class="language-plaintext highlighter-rouge">private</code> by default; <code class="language-plaintext highlighter-rouge">pub</code> makes it public</li>
  <li>O3 - uses traits for creating subtypes</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - variables are immutable by default; mutable variables are designated by <code class="language-plaintext highlighter-rouge">mut</code></li>
</ul>

<h3 id="swift">Swift</h3>

<blockquote>
  <p><a href="https://www.swift.org/">Swift</a> is a “general-purpose programming language built using a modern approach to safety, performance, and software design patterns.”</p>
</blockquote>

<ul>
  <li>O1 - has regular classes (also enums and structs)</li>
  <li>O2 - class properties/methods can be made <code class="language-plaintext highlighter-rouge">private</code></li>
  <li>O3 - uses protocols for creating subtypes</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - immutable variables are initialized with <code class="language-plaintext highlighter-rouge">let</code>; mutable variables are initialized with <code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<h2 id="why-should-your-team-pick-an-inclusive-language">Why should your team pick an inclusive language?</h2>

<p>Successful software development requires solving two kinds of problems - technical and human.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Junior programmer&#39;s bookshelf: 90% APIs and programming languages; Senior programmer&#39;s bookshelf: 80% applied psychology.</p>&mdash; ☕ J. B. Rainsberger (@jbrains) <a href="https://twitter.com/jbrains/status/616228270841962496?ref_src=twsrc%5Etfw">July 1, 2015</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I believe inclusive languages offer benefits on both of these fronts. On the technical side, neither style is universally superior. The object-oriented approach is usually better if your system “operates” on “things” and new features typically involve adding new things (rather than new operations). On the other hand, if new features typically require new operations then a functional style may be a better fit<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>.</p>

<p>They can also be used in conjunction; <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">clean architecture</a> may be a good model. Following this approach, you can model your domain and write all of your core business logic using functional code. Then use an object-oriented style at the adapter and interface layers. Given that the majority of code written today is object-oriented, there are certainly some benefits of applying functional techniques where it makes sense without having to demand that the entire codebase be rewritten in a functional language.</p>

<p>I believe that providing your teammates with the ability to code as they want to, using the paradigm of their choice, will increase team happiness and morale. I hope it also encourages conversations and teaching moments from both sides. Will you be more productive? Will you create a better design? Will you get a better product? I don’t know…</p>

<h2 id="next-steps">Next steps</h2>

<p>Which language should I pick? Here are a few questions to help you make a decision.</p>

<ul>
  <li>Are you doing systems programming? -&gt; Rust</li>
  <li>Are you working on iOS? -&gt; Swift</li>
  <li>Are you working on Android? -&gt; Kotlin</li>
  <li>Do you need to interoperate with other Java code? -&gt; Scala/Kotlin</li>
</ul>

<p>If you don’t identify strongly with any of the questions above, you may want to consider a language that is easier to learn (especially if you are teaching an entire team). Based on the collective background of the team, here are my recommendations:</p>

<p>If you are coming from a Java background…</p>

<blockquote>
  <p>kotlin &lt; scala &lt; swift &lt; rust</p>
</blockquote>

<p>If you are coming from an Objective-C background…</p>

<blockquote>
  <p>swift &lt; kotlin &lt; rust &lt; scala</p>
</blockquote>

<p>Still unsure? Ok, Ok, don’t twist my arm. Pick Kotlin :)</p>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>You can write crap code in any paradigm. - Dave Farley</p>
</blockquote>

<p>There is clear division between those who use more mainstrain (i.e. object-oriented) languages and those who use functional languages. There are countless blogs (primarily from the functional crowd) trying to convince the majority to “see the light.” It is a “them vs. us” mentality, but I believe there is a middle ground where these two crowds can meet, learn, develop, and succeed together. This middle ground is an <em>inclusive</em> programming language.</p>

<p>Thanks for reading!</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://homes.cs.aau.dk/~normark/prog3-03/html/notes/paradigms_themes-paradigm-overview-section.html#paradigms_oo-paradigm-overview_title_1">Object-oriented paradigm</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>“Why Functional Programming Should Be the Future of Software Development,” IEEE Spectrum, Oct. 23, 2022.  [Online]. Available: https://spectrum.ieee.org/functional-programming. [Accessed: Nov. 14, 2022] <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Subtyping is also known as interface inheritance, whereas subclassing is known as implementation inheritance or code inheritance (see <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov substitution principle</a>). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect (from <a href="https://mostly-adequate.gitbook.io/mostly-adequate-guide/ch03">Professor Frisby’s Mostly Adequate Guide to Functional Programming</a>) <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>A side effect is a change of system state or observable interaction with the outside world that occurs during the calculation of a result. Examples include: reading a file, inserting a record into a database, making an http call, printing to the screen, or getting user input. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>This means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>Several languages just missed the cut. C#, C++, Java, and Go meet all the conditions except that mutable variables are not designated. F# and OCaml actually met all the criteria, but I do not believe that the average object-oriented programmer would be comfortable using them. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>Philip Wadler named this the <a href="http://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt">expression problem</a>. Another good reference <a href="https://www.cs.cornell.edu/courses/cs3110/2015fa/l/25-expression/lec.pdf">here</a>. <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="inclusive" /><category term="programming-languages" /><category term="kotlin" /><category term="scala" /><category term="rust" /><category term="swift" /><category term="functional" /><category term="object-oriented" /><summary type="html"><![CDATA[This post explores the possibility of using inclusive programming languages, i.e. ones that successfully accommodate functional and object-oriented programming styles in a single codebase.]]></summary></entry><entry><title type="html">Experiment 08</title><link href="https://dlfelps.github.io/2022/10/03/DSL3.html" rel="alternate" type="text/html" title="Experiment 08" /><published>2022-10-03T00:00:00+00:00</published><updated>2022-10-03T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/10/03/DSL3</id><content type="html" xml:base="https://dlfelps.github.io/2022/10/03/DSL3.html"><![CDATA[<p>The final post explains how to use an external <strong>domain specific language</strong> to load records after compile time!</p>

<h2 id="introduction">Introduction</h2>

<p>In the previous two posts we explored several ways to model a simple stock trading domain using syntax that is available (or extendable) within F#. This can be described as an <em>internal</em> domain specific language; the biggest limitation with this approach is that all data must be entered before the program is compiled - not very realistic if you want to trade stocks regularly. This post explores how to create an <em>external</em> domain specific language that can be used to load records after compile time.</p>

<h2 id="parser-combinators">Parser combinators</h2>

<p>The most common way to load text data is a delimted text loader, but this only works if your input is structured (i.e. every column of data is aligned). For this post, I want to use a more powerful tool - parser combinators. Parser combinators implement a formal grammar over the input, which we need to interpret a domain specific language. But this post is not a full parser combinator tutorial. In fact, we will use the <code class="language-plaintext highlighter-rouge">parse</code> computation expression from the <a href="https://github.com/stephan-tolksdorf/fparsec">FParsec</a> library instead of the more tradional (and recommended) parser combinator symbols (e.g <code class="language-plaintext highlighter-rouge">&lt;|&gt;</code>, <code class="language-plaintext highlighter-rouge">.&lt;&lt;.</code>, … ). For a deeper dive, see these tutorials <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. To demonstrate the power of this approach, I will use a parser that can interpret the syntax from either data model 2a or 2b from <a href="/2022/10/02/DSL2.html">post #2</a> in this series. Here are a few examples of valid inputs:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">Buy 4 SharesOf MSFT At 258.32 AllOrNone
Sell 3 SharesOf META At 158.71 
Sell 6 GOOGL 106.08</span></code></pre></figure>

<h2 id="parser-combinator-workflow-overview">Parser combinator workflow overview</h2>

<p>I find it easiest to follow this code by starting at the result and working backwards. Here is an overview of how the pieces fit together before we dig into the code (arrows are labeled with output type).</p>

<p><img src="/assets/images/mermaid-diagram-2022-09-27-070837.svg" alt="Parser combinator program flow" title="Parser combinator program flow" /></p>

<h2 id="step-3-runparseronfile">Step 3: runParserOnFile</h2>

<p>We begin with the final step - to run the complete parser on our input file. Here is the code:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">result</span><span class="p">:</span> <span class="nc">ParserResult</span><span class="p">&lt;</span><span class="nc">Trade</span> <span class="kt">list</span><span class="p">,</span><span class="kt">unit</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">runParserOnFile</span> <span class="p">(</span><span class="n">many</span> <span class="n">parseTrade</span><span class="p">)</span> <span class="bp">()</span> <span class="s2">"input.txt"</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nn">Encoding</span><span class="p">.</span><span class="nc">ASCII</span>

<span class="k">let</span> <span class="n">trades</span><span class="p">:</span> <span class="nc">Trade</span> <span class="kt">list</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">result</span> <span class="k">with</span>
  <span class="p">|</span> <span class="nc">Success</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nc">Trade</span> <span class="kt">list</span><span class="o">,_,_)</span> <span class="p">-&gt;</span> <span class="n">x</span>
  <span class="p">|</span> <span class="p">_</span> <span class="p">-&gt;</span> <span class="bp">[]</span></code></pre></figure>

<p>The code uses the a built-in <code class="language-plaintext highlighter-rouge">FParsec</code> function called <code class="language-plaintext highlighter-rouge">runParserOnFile</code>, which takes the following arguments:</p>
<ul>
  <li>parser <code class="language-plaintext highlighter-rouge">(many parseTrade)</code></li>
  <li>initial user state <code class="language-plaintext highlighter-rouge">()</code></li>
  <li>input file <code class="language-plaintext highlighter-rouge">input.txt</code></li>
  <li>file encoding  <code class="language-plaintext highlighter-rouge">System.Text.Encoding.ASCII</code></li>
</ul>

<p>The parser argument combines two functions: the built-in <code class="language-plaintext highlighter-rouge">FParsec</code> function <code class="language-plaintext highlighter-rouge">many</code><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> and our custom parser <code class="language-plaintext highlighter-rouge">parseTrade</code>, which we describe in the next section.  If the file is parsed successfully then we can extract our list of trades from the <code class="language-plaintext highlighter-rouge">ParseResult</code> type.</p>

<h2 id="step-2-parsetrade">Step 2: parseTrade</h2>

<p>The basic idea with this parser is that we are composing<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> many simple parsers into a more complex parser that captures the grammar/rules of our domain specific language. Here is the finished parser:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">parseTrade</span> <span class="p">=</span>
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">buyOrSell</span> <span class="p">=</span> <span class="n">parseTransaction</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">parseNumShares</span>         
    <span class="k">do</span><span class="o">!</span> <span class="n">optionalIgnore</span> <span class="s2">"SharesOf"</span>    
    <span class="k">let</span><span class="o">!</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">parseTicker</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">optionalIgnore</span> <span class="s2">"At"</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">price</span> <span class="p">=</span> <span class="n">parsePrice</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="n">parsePortion</span> 

    <span class="k">return</span> <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="n">buyOrSell</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">numShares</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">ticker</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="n">allOrNone</span><span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">parse</code> computation expression does a lot for us here. Under the hood, it threads together the sequence of assignments so that consecutive parsers are linked. The basic idea is shown in the diagram below.</p>

<p><img src="/assets/images/mermaid-diagram-2022-09-29-100911.svg" alt="Parse computation expression" title="Parse computation expression" /></p>

<p>Each call parses a different part of the transaction. We will examine a few of these parsers more closely in the following section, but for now just try to understand how this works at a high level.</p>

<p><code class="language-plaintext highlighter-rouge">parseTrade</code> proceeds by parsing (or ignoring) the necessary values to create a <code class="language-plaintext highlighter-rouge">Trade</code> type and return it<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>.</p>

<h2 id="step-1-individual-token-parsers">Step 1: individual token parsers</h2>

<p>Each of snippet of code below is a parser that detects a specific token from our domain specific language. We will look at a few of these smaller parsers to highlight some fundamental parsing elements. The full code listing can be found <a href="https://github.com/dlfelps/dsl-examples/blob/main/exp08-parser-combinator.fsx">here</a>. The first snippet detects the token <em>Buy</em> or <em>Sell</em>.</p>

<h3 id="do-let-pstring-choice"><code class="language-plaintext highlighter-rouge">do!</code>, <code class="language-plaintext highlighter-rouge">let!</code>, <code class="language-plaintext highlighter-rouge">pstring</code>, <code class="language-plaintext highlighter-rouge">choice</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">convertTransaction</span> <span class="n">inputString</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">inputString</span> <span class="k">with</span>
  <span class="p">|</span> <span class="s2">"Sell"</span> <span class="p">-&gt;</span> <span class="nc">Sell</span>
  <span class="p">|</span> <span class="p">_</span> <span class="p">-&gt;</span> <span class="nc">Buy</span>

<span class="k">let</span> <span class="n">parseTransaction</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">buyOrSellString</span> <span class="p">=</span> <span class="n">choice</span> <span class="o">[(</span><span class="n">pstring</span> <span class="s2">"Buy"</span><span class="o">);(</span><span class="n">pstring</span> <span class="s2">"Sell"</span><span class="o">)]</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">convertTransaction</span> <span class="n">buyOrSellString</span><span class="p">)</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Notice that <code class="language-plaintext highlighter-rouge">parseTransaction</code> is itself another <code class="language-plaintext highlighter-rouge">parse</code> computation expression. First I will describe the purpose of each line, then we will discuss syntax.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 08</code> Skip any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 09</code> Check if the input begins with “Buy” or “Sell”</li>
  <li><code class="language-plaintext highlighter-rouge">Line 10</code> If successful, convert the string to its corresponding type (e.g. <code class="language-plaintext highlighter-rouge">Buy</code> type) and return</li>
</ul>

<p>Now let’s revist any new syntax. The <code class="language-plaintext highlighter-rouge">do</code> keyword in F# requires the following expression to return <code class="language-plaintext highlighter-rouge">unit</code>. Similarly, the <code class="language-plaintext highlighter-rouge">do!</code> notation on <code class="language-plaintext highlighter-rouge">Line 08</code> is used in a computation expression when the following expression returns a “unit-like” value<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>.</p>

<p><code class="language-plaintext highlighter-rouge">Line 09</code> uses two new commands. <code class="language-plaintext highlighter-rouge">pstring</code> creates a parser that succeeds if it encounters its argument (i.e. “Buy” or “Sell”) and fails otherwise. <code class="language-plaintext highlighter-rouge">choice</code> composes these two parsers in a way such that it returns the value of the first successful parser. If both fail then the <code class="language-plaintext highlighter-rouge">choice</code> parser fails.</p>

<p>The difference between <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">let!</code> is analogous to <code class="language-plaintext highlighter-rouge">do</code> and <code class="language-plaintext highlighter-rouge">do!</code> - <code class="language-plaintext highlighter-rouge">let!</code> binds a name to an value that is within a computation expression context <sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>.</p>

<h3 id="pint32-pfloat"><code class="language-plaintext highlighter-rouge">pint32</code>, <code class="language-plaintext highlighter-rouge">pfloat</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">parseNumShares</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">pint32</span>
    <span class="k">return</span> <span class="n">numShares</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Stepping through this snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 03</code> Skip any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 04</code> Read an integer</li>
  <li><code class="language-plaintext highlighter-rouge">Line 05</code> Return the integer</li>
</ul>

<p>You will recognize most of the syntax here, with the exception of <code class="language-plaintext highlighter-rouge">pint32</code>, which parses 1 or more digits as an integer. Although not shown here <code class="language-plaintext highlighter-rouge">parsePrice</code> uses the related function <code class="language-plaintext highlighter-rouge">pfloat</code>.</p>

<h3 id="skipmany-return"><code class="language-plaintext highlighter-rouge">skipMany</code>, <code class="language-plaintext highlighter-rouge">return!</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">optionalIgnore</span> <span class="n">str</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">return</span><span class="o">!</span> <span class="n">skipMany</span> <span class="p">(</span><span class="n">pstring</span> <span class="n">str</span><span class="p">)</span>    
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This code snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 03</code> Skips any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 04</code> Creates a parser for the function argument <code class="language-plaintext highlighter-rouge">str</code> and skips it if found and returns <em>without</em> wrapping in a parser context</li>
</ul>

<p>This function is used to create parsers for our placeholder types (i.e. <code class="language-plaintext highlighter-rouge">SharesOf</code> and <code class="language-plaintext highlighter-rouge">At</code>). <code class="language-plaintext highlighter-rouge">skipMany</code> will apply the parser 0 or more times and throw away any tokens found. The careful reader will also notice the use of <code class="language-plaintext highlighter-rouge">return!</code> instead of <code class="language-plaintext highlighter-rouge">return</code>. The simple rule is use <code class="language-plaintext highlighter-rouge">return</code> if you need to wrap a value in the context of the computation expression (i.e. a parser) and use <code class="language-plaintext highlighter-rouge">return!</code> if the value already has the correct context<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>.</p>

<h3 id="many1-asciiupper"><code class="language-plaintext highlighter-rouge">many1</code>, <code class="language-plaintext highlighter-rouge">asciiUpper</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">convertTicker</span> <span class="n">inputString</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">inputString</span> <span class="k">with</span>
  <span class="p">|</span> <span class="s2">"GOOGL"</span> <span class="p">-&gt;</span> <span class="nc">GOOGL</span>
  <span class="p">|</span> <span class="s2">"META"</span> <span class="p">-&gt;</span> <span class="nc">META</span>
  <span class="p">|</span> <span class="p">_</span> <span class="p">-&gt;</span> <span class="nc">MSFT</span>

<span class="k">let</span> <span class="n">parseTicker</span> <span class="p">=</span> 
  <span class="n">parse</span><span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">tickerCharList</span> <span class="p">=</span> <span class="p">(</span><span class="n">many1</span> <span class="n">asciiUpper</span><span class="p">)</span> 
    <span class="k">let</span> <span class="n">tickerString</span> <span class="p">=</span>  <span class="n">tickerCharList</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="kt">string</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">reduce</span> <span class="o">(+)</span>
    <span class="k">let</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">convertTicker</span> <span class="n">tickerString</span>
    <span class="k">return</span> <span class="n">ticker</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>This code snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 09</code> Skips any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 10</code> Creates a parser that accepts one or more capitalized characters in ‘A’ - ‘Z’</li>
  <li><code class="language-plaintext highlighter-rouge">Line 11</code> Converts the character list into a single string</li>
  <li><code class="language-plaintext highlighter-rouge">Line 12</code> Maps the string to the corresponding <code class="language-plaintext highlighter-rouge">Stock</code> type</li>
</ul>

<p>This parser demonstrates two more primitive functions - <code class="language-plaintext highlighter-rouge">many1</code> and <code class="language-plaintext highlighter-rouge">asciiUpper</code>. Combined they create a parser that accepts 1 or more upper case ASCII characters. The other notable feature about <code class="language-plaintext highlighter-rouge">parseTicker</code> is that it mixes the use of <code class="language-plaintext highlighter-rouge">let!</code> and <code class="language-plaintext highlighter-rouge">let</code>. The <code class="language-plaintext highlighter-rouge">let!</code> on <code class="language-plaintext highlighter-rouge">Line 10</code> unwraps the parser context from the expresson on the right to bind <code class="language-plaintext highlighter-rouge">ticketCharList</code> to a list of characters. The following two lines perform operations on regular F# types so they use the <code class="language-plaintext highlighter-rouge">let</code> keyword.</p>

<h3 id="preturn"><code class="language-plaintext highlighter-rouge">preturn</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">parsePortion</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">portion</span> <span class="p">=</span> <span class="n">choice</span> <span class="o">[(</span><span class="n">pstring</span> <span class="s2">"AllOrNone"</span><span class="o">);</span> <span class="p">(</span><span class="n">pstring</span> <span class="s2">"Partial"</span><span class="o">);</span> <span class="p">(</span><span class="n">preturn</span> <span class="s2">"AllOrNone"</span><span class="o">)]</span>
    <span class="k">return</span> <span class="n">portion</span> <span class="p">=</span> <span class="s2">"AllOrNone"</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Stepping through this snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 03</code> Skip any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 04</code> Check if the input begins with “AllOrNone” or “Partial”; if neither return “AllOrNone”</li>
  <li><code class="language-plaintext highlighter-rouge">Line 05</code> Return true if previous assignment was “AllOrNone”</li>
</ul>

<p>This parser is very similar to <code class="language-plaintext highlighter-rouge">parseTransaction</code> but it demonstrates use of the <code class="language-plaintext highlighter-rouge">preturn</code> primitive. <code class="language-plaintext highlighter-rouge">preturn</code> always succeeds with the provided value; here I use it as a default value <code class="language-plaintext highlighter-rouge">choice</code> parser by providing it as a final value (only used if all other choices fail).</p>

<p>At this point it is probably worthwhile to revist <a href="#step-2-parsetrade">Step 2</a> for a better understanding of the composition of <code class="language-plaintext highlighter-rouge">parseTrade</code>. The code listing for this series can be found <a href="https://github.com/dlfelps/dsl-examples">here</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>“A complex system that works is invariably found to have evolved from a simple system that worked.” - Gall’s law (John Gall)</p>
</blockquote>

<p>My favorite three things about parser combinators are:</p>
<ol>
  <li>There are many built-in primitive parsers</li>
  <li>Simple parsers are easy to create and test</li>
  <li>Complex parsers are easy to create by composing simple parsers</li>
</ol>

<p>I hope this post has demonstrated a useful application of parser combinators. But it may not have been as successful in convincing you the value of external domain specific languages - that’s probably because I can’t honestly make a good argument for them. If your program reads input from another machine then it will certainly be of a structured form (e.g. JSON). If your program reads input from a human then I doubt a domain specific language is the most natural way for the human to input data. I can’t think of a realistic example where a domain specific language would be better than a graphical user interface.</p>

<p><img src="/assets/images/ETRADE-mobile-stock-quote.png" alt="Stock App" title="Stock App" /></p>

<p>On the other hand, I have benefited from using <strong>embedded domain modeling</strong>. Using natural notions about the world within my code has made it easier to write, reason about, and revisit. If I have piqued your interest in domain modeling, then I would recommend browsing the related topics below. I believe each topic has something different to offer  (like the <a href="https://en.wikipedia.org/wiki/Blind_men_and_an_elephant">parable of the blind men and the elephant</a>).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Beginner resources</th>
      <th style="text-align: center">Author</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TDD</td>
      <td style="text-align: center"><a href="https://blog.ploeh.dk/2015/08/10/type-driven-development/">Type Driven Development</a></td>
      <td style="text-align: center">Mark Seemann</td>
    </tr>
    <tr>
      <td style="text-align: center">DDD-light</td>
      <td style="text-align: center"><a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/">Domain Modeling Made Functional</a></td>
      <td style="text-align: center">Scott Wlascin</td>
    </tr>
    <tr>
      <td style="text-align: center">APIs</td>
      <td style="text-align: center"><a href="http://www.infoq.com/presentations/effective-api-design">How to Design a Good API &amp; Why it Matters</a></td>
      <td style="text-align: center">Josh Bloch</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Advanced resources</th>
      <th style="text-align: center">Author</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">DDD</td>
      <td style="text-align: center"><a href="https://www.youtube.com/watch?v=pMuiVlnGqjk">Domain Driven Design</a></td>
      <td style="text-align: center">Eric Evans</td>
    </tr>
    <tr>
      <td style="text-align: center">DSL</td>
      <td style="text-align: center"><a href="https://martinfowler.com/books/dsl.html">Domain Specific Languages</a></td>
      <td style="text-align: center">Martin Fowler</td>
    </tr>
    <tr>
      <td style="text-align: center">MDD</td>
      <td style="text-align: center">Model-driven development: The good, the bad, and the ugly</td>
      <td style="text-align: center">Hailpern/Tarr</td>
    </tr>
    <tr>
      <td style="text-align: center">LOP</td>
      <td style="text-align: center">Language Oriented Programming</td>
      <td style="text-align: center">Ward</td>
    </tr>
  </tbody>
</table>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="http://www.quanttec.com/fparsec/tutorial.html">FParsec Tutorial</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/">fsharpforfunandprofit </a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><code class="language-plaintext highlighter-rouge">many</code> indicates that we expect to run <code class="language-plaintext highlighter-rouge">parseTrade</code> zero or more times (depending on the number of lines in our input file). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>Instead of using the more traditional parser combinator functions (e.g. <code class="language-plaintext highlighter-rouge">&lt;|&gt;</code>, <code class="language-plaintext highlighter-rouge">.&gt;&gt;.</code>, …) I elected to use a more familiar syntax with the <code class="language-plaintext highlighter-rouge">parse</code> computation expression from FParsec. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>Within a computation expression, <code class="language-plaintext highlighter-rouge">return</code> performs an operation that is the opposite of <code class="language-plaintext highlighter-rouge">let!</code> - it wraps the value within a context specified by the computation expression. In this case the value has a <code class="language-plaintext highlighter-rouge">Trade</code> type, so <code class="language-plaintext highlighter-rouge">parseTrade</code> actually returns a value of type <code class="language-plaintext highlighter-rouge">Parser&lt;Trade, unit&gt;</code>. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>The function <a href="https://www.quanttec.com/fparsec/reference/charparsers.html#members.spaces"><code class="language-plaintext highlighter-rouge">spaces</code></a> has type <code class="language-plaintext highlighter-rouge">Parser&lt;unit,'u&gt;</code>, which is unit-like within this context. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>In this case the context is <code class="language-plaintext highlighter-rouge">ParserResult&lt;T&gt;</code>; <code class="language-plaintext highlighter-rouge">let!</code> binds the type <code class="language-plaintext highlighter-rouge">T</code>. This pattern is commonly used with the <code class="language-plaintext highlighter-rouge">async {}</code> computation expression. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>Note that <code class="language-plaintext highlighter-rouge">parseTrade</code> calls this function with <code class="language-plaintext highlighter-rouge">do!</code> since it returns a unit-like parser. <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="dsl" /><category term="ddd" /><summary type="html"><![CDATA[The final post explains how to use an external domain specific language to load records after compile time!]]></summary></entry><entry><title type="html">Experiment 07</title><link href="https://dlfelps.github.io/2022/10/02/DSL2.html" rel="alternate" type="text/html" title="Experiment 07" /><published>2022-10-02T00:00:00+00:00</published><updated>2022-10-02T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/10/02/DSL2</id><content type="html" xml:base="https://dlfelps.github.io/2022/10/02/DSL2.html"><![CDATA[<p>The second post in the <strong>domain specific language</strong> series demonstrates how you can use F# computation expressions to create an embedded language.</p>

<h2 id="introduction">Introduction</h2>

<p><em>Please read the <a href="/2022/10/01/DSL1.html">first post</a> in this series before continuing.</em></p>

<p>This post demonstrates how to create a custom <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions">computation expression</a> to capture data. You may have already used computation expressions without knowing it -  <code class="language-plaintext highlighter-rouge">seq {}</code> and <code class="language-plaintext highlighter-rouge">async {}</code> are both built using computation expressions. Computation expressions  provide users with a way to extend F#. This ability is most similar to macros or metaprogramming abilities of other languages (e.g. LISP, Rust, Ruby, Template Haskell), but I find computation expressions more straightforward to understand and use. In this post, we will see how to create three kinds of computation expressions to model our data.</p>

<p>Our first example uses computation expressions to create a concise record syntax.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="n">trade</span><span class="p">{</span>
    <span class="nc">Buy</span> <span class="mi">4</span> <span class="nc">MSFT</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">3</span> <span class="nc">META</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">6</span> <span class="nc">GOOGL</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span> <span class="nc">AllOrNone</span>
  <span class="p">}</span></code></pre></figure>

<h2 id="data-model-2a-concise-record-syntax">Data model #2a (Concise record syntax)</h2>

<p>The expression above creates the same list of <code class="language-plaintext highlighter-rouge">Trade</code> records as in the first post without having to specify the record’s field names. We might choose this data model if we want a <em>concise</em> record syntax.</p>

<p>We accomplish this syntax by creating a <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#extending-existing-builders-with-new-custom-operations">custom computation expression</a>. First, define a <code class="language-plaintext highlighter-rouge">TradeBuilder</code> class and provide an implementation for <code class="language-plaintext highlighter-rouge">Yield</code><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Then implement two custom operations (tagged with the <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-customoperationattribute.html"><code class="language-plaintext highlighter-rouge">CustomOperation</code></a> attribute). Due to the domain and record layout, I decided it was natural to use <code class="language-plaintext highlighter-rouge">Buy</code> and <code class="language-plaintext highlighter-rouge">Sell</code> as keywords to create the record. Each method takes 5 parameters: the first argument captures trades that were created above the current trade but within the same computation expression; it has type <code class="language-plaintext highlighter-rouge">seq&lt;Trade&gt;</code>. The next 4 parameters match those of the record (except <code class="language-plaintext highlighter-rouge">price</code>, which takes a <code class="language-plaintext highlighter-rouge">float</code> and is converted to <code class="language-plaintext highlighter-rouge">decimal</code>).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">type</span> <span class="nc">TradeBuilder</span><span class="bp">()</span> <span class="p">=</span>

      <span class="k">member</span> <span class="o">_.</span><span class="nc">Yield</span> <span class="p">_</span> <span class="p">=</span> <span class="bp">[]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Buy"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Buy</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Sell"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Sell</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span></code></pre></figure>

<p>Before we can use the computation expression, we must initialize it with:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trade</span> <span class="p">=</span> <span class="nn">Trade</span><span class="p">.</span><span class="nc">TradeBuilder</span><span class="bp">()</span>

<span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="n">trade</span><span class="p">{</span>
    <span class="nc">Buy</span> <span class="mi">4</span> <span class="nc">MSFT</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">3</span> <span class="nc">META</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">6</span> <span class="nc">GOOGL</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span> <span class="nc">AllOrNone</span>
  <span class="p">}</span></code></pre></figure>

<p>Then if we run <code class="language-plaintext highlighter-rouge">Trade.tradeMany trades</code> we get the correct output:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">You just purchased 4 shares of MSFT for a total cost of $</span>1,033.28.
<span class="gp">You just sold 3 shares of META for a total earnings of $</span>476.13.
<span class="gp">You just sold 6 shares of GOOGL for a total earnings of $</span>636.48.
<span class="go">-------------------------------------------------------------------
</span><span class="gp">You just executed a series of trades that earned you $</span>79.33.</code></pre></figure>

<h2 id="data-model-2b-concise-record-syntax-with-placeholders">Data model #2b (Concise record syntax with placeholders)</h2>

<p>Our first attempt at a data model has a serious flaw - without specifying the field names it could be very easy to forget to include a field or put it in the wrong order. Imagine a record with 5 fields all the same type (e.g. decimal), how would you keep them straight? In some domains it may be appropriate to add a few placeholder keywords to help keep things straight. In this example, the following probably reads much better to domain experts:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="n">trade</span><span class="p">{</span>
    <span class="nc">Buy</span> <span class="mi">4</span> <span class="nc">SharesOf</span> <span class="nc">MSFT</span> <span class="nc">At</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">3</span> <span class="nc">SharesOf</span> <span class="nc">META</span> <span class="nc">At</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">6</span> <span class="nc">SharesOf</span> <span class="nc">GOOGL</span> <span class="nc">At</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span> <span class="nc">AllOrNone</span>
  <span class="p">}</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">SharesOf</code> keyword tells you 2 things - the previous parameter was the number of shares and the following parameter is the stock ticker. The <code class="language-plaintext highlighter-rouge">At</code> keyword separates the price constraints for the trade. This is still much more concise than specifying all the field names and it improves readability. To update  the <code class="language-plaintext highlighter-rouge">TradeBuilder</code> code we need to define two new types (<code class="language-plaintext highlighter-rouge">SharesOf</code> and <code class="language-plaintext highlighter-rouge">At</code>) and add them to the parameter list of each method.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">type</span> <span class="nc">SharesOf</span> <span class="p">=</span> <span class="nc">SharesOf</span>
<span class="k">type</span> <span class="nc">At</span> <span class="p">=</span> <span class="nc">At</span>

<span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">type</span> <span class="nc">TradeBuilder</span><span class="bp">()</span> <span class="p">=</span>

      <span class="k">member</span> <span class="o">_.</span><span class="nc">Yield</span> <span class="p">_</span> <span class="p">=</span> <span class="bp">[]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Buy"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Buy</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">sharesOf</span><span class="p">:</span><span class="nc">SharesOf</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span><span class="nc">At</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Sell"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Sell</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">sharesOf</span><span class="p">:</span><span class="nc">SharesOf</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span><span class="nc">At</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span>
        </code></pre></figure>

<h2 id="data-model-2c-fluent-record-syntax">Data model #2c (Fluent record syntax)</h2>

<p>The final computation expression uses the <a href="https://refactoring.guru/design-patterns/builder">Builder Design Pattern</a> and a Fluent expression style to create trades. This approach is most useful when you can set default values for everything and then specify a subset of fields to update (similar to the <code class="language-plaintext highlighter-rouge">{default with ...}</code> record syntax). It also provides a way to set fields in any order. But unlike the previous two computation expressions, this approach only creates a single trade per expression.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="p">[</span>
    <span class="n">trade</span> <span class="p">{</span>
      <span class="nc">Buy</span> <span class="mi">4</span>
      <span class="nc">SharesOf</span> <span class="nc">MSFT</span>
      <span class="nc">At</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span>
      <span class="nc">AllOrNone</span>
    <span class="o">};</span>
    <span class="c1">//AllOrNone optional</span>
    <span class="n">trade</span> <span class="p">{</span>
      <span class="nc">Sell</span> <span class="mi">3</span>
      <span class="nc">SharesOf</span> <span class="nc">META</span>
      <span class="nc">At</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span>      
    <span class="o">};</span>
    <span class="c1">// order-independent</span>
    <span class="n">trade</span> <span class="p">{</span>
      <span class="nc">AllOrNone</span>
      <span class="nc">At</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span>      
      <span class="nc">SharesOf</span> <span class="nc">GOOGL</span>
      <span class="nc">Sell</span> <span class="mi">6</span>
    <span class="o">};</span>
  <span class="p">]</span>
        </code></pre></figure>

<p>As you might have guessed, the code for this data model is significantly different. <code class="language-plaintext highlighter-rouge">Yield</code> now provides the default record and we must specify custom operations for <code class="language-plaintext highlighter-rouge">Buy</code>, <code class="language-plaintext highlighter-rouge">Sell</code>, <code class="language-plaintext highlighter-rouge">SharesOf</code>, <code class="language-plaintext highlighter-rouge">At</code>, <code class="language-plaintext highlighter-rouge">AllOrNone</code>, and <code class="language-plaintext highlighter-rouge">Partial</code>. Each method takes the current trade and updates the corresponding field.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">let</span> <span class="n">baseTrade</span> <span class="p">=</span> <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="nc">MSFT</span><span class="p">;</span> <span class="n">numShares</span><span class="p">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">price</span><span class="p">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="p">}</span>

  <span class="k">type</span> <span class="nc">TradeBuilder</span><span class="bp">()</span> <span class="p">=</span>

      <span class="k">member</span> <span class="o">_.</span><span class="nc">Yield</span> <span class="p">_</span> <span class="p">=</span> <span class="n">baseTrade</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Buy"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Buy</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">input</span><span class="p">;</span> <span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Buy</span><span class="p">}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Sell"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Sell</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">input</span><span class="p">;</span> <span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Sell</span><span class="p">}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"SharesOf"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Ticker</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="nc">Stocks</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">input</span><span class="p">}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"At"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Price</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="kt">float</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">price</span> <span class="p">=</span> <span class="n">decimal</span><span class="p">(</span><span class="n">input</span><span class="o">)}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"AllOrNone"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">AllOrNone</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="bp">true</span><span class="p">}</span>
    
      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Partial"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Partial</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="bp">false</span><span class="p">}</span>
        </code></pre></figure>

<p>The code listing for this series can be found <a href="https://github.com/dlfelps/dsl-examples">here</a>.</p>

<h2 id="some-other-examplesreferences">Some other examples/references</h2>

<p>In my opinion, custom computational expressions are an underutilized feature of F#. They are much more flexible/powerful than I am showing here so if you would like learn more please check out the following resources that use custom computation expressions.</p>

<p><a href="https://github.com/panesofglass/computation-expressions-workshop">Computation expressions workshop</a></p>

<p><a href="https://www.youtube.com/watch?v=pC4ZIeOmgB0&amp;t=2461s">Computation Expressions Explained - Youtube</a></p>

<p><a href="https://atlemann.github.io/fsharp/2019/12/11/mindstorms-dsl.html">Lego Mindstorms DSL</a></p>

<p><a href="https://github.com/fsprojects/FsHttp/blob/master/src/FsHttp/Dsl.CE.fs">FsHttp CE</a></p>

<h2 id="next">Next</h2>

<p>In the final post of this series we will learn about the difference between an internal and external domain specific language and use <a href="https://github.com/stephan-tolksdorf/fparsec">FParsec</a> to load records after compile time!</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#creating-a-new-type-of-computation-expression <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="dsl" /><category term="ddd" /><summary type="html"><![CDATA[The second post in the domain specific language series demonstrates how you can use F# computation expressions to create an embedded language.]]></summary></entry><entry><title type="html">Experiment 06</title><link href="https://dlfelps.github.io/2022/10/01/DSL1.html" rel="alternate" type="text/html" title="Experiment 06" /><published>2022-10-01T00:00:00+00:00</published><updated>2022-10-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/10/01/DSL1</id><content type="html" xml:base="https://dlfelps.github.io/2022/10/01/DSL1.html"><![CDATA[<p>The first post in the <strong>domain specific language</strong> series explores the basics of domain modeling using record types in F#.</p>

<h2 id="introduction">Introduction</h2>

<p>A recent study<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> found that programmers who used functional, statically-typed languages often started a programming task by constructing types to model their problem domain.  I do too, but it’s how I start any complex task (even non-programming tasks). The ability to easily create types is partially what drew me to F# in the first place. I use static types as a lightweight specification language; I can designate high level functions with their anticipated signatures (using types that make sense within the domain) and then the compiler tells me when I stray from that specification as I implement.</p>

<p><img src="/assets/images/hedberg.jpg" alt="Mitch Hedberg" title="Mitch Hedberg" /></p>

<h2 id="study-domain">Study domain</h2>

<p>To motivate this series of posts I chose a similar domain to that used in the book <a href="https://www.manning.com/books/dsls-in-action">DSLs in Action</a>. But since I don’t have a book’s worth of content I will only adopt a subset of this domain to demonstrate my examples. We will model a simplified stock transaction.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Simple transaction</strong></th>
      <th style="text-align: center"><strong>type</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Buy/Sell</td>
      <td style="text-align: center">discriminated union</td>
    </tr>
    <tr>
      <td style="text-align: center">Which stock?</td>
      <td style="text-align: center">discriminated union</td>
    </tr>
    <tr>
      <td style="text-align: center">Price?</td>
      <td style="text-align: center">decimal</td>
    </tr>
    <tr>
      <td style="text-align: center">How many?</td>
      <td style="text-align: center">int</td>
    </tr>
    <tr>
      <td style="text-align: center">Partial/AllOrNone</td>
      <td style="text-align: center">bool</td>
    </tr>
  </tbody>
</table>

<h2 id="data-model-1-record-type">Data model #1 (Record type)</h2>

<p>We start by modeling the domain with an F# Record type. Let me say for the <em>record</em> that I use F# record types 98% of the time. I rarely have a good reason to use anything else. Here is one way to create the record type.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">type</span> <span class="nc">Transaction</span> <span class="p">=</span> <span class="nc">Buy</span> <span class="p">|</span> <span class="nc">Sell</span>

<span class="k">type</span> <span class="nc">Stocks</span> <span class="p">=</span> <span class="nc">MSFT</span> <span class="p">|</span> <span class="nc">GOOGL</span> <span class="p">|</span> <span class="nc">META</span>

<span class="k">type</span> <span class="nc">Trade</span> <span class="p">=</span> <span class="p">{</span>
        <span class="n">buyOrSell</span><span class="p">:</span> <span class="nc">Transaction</span>
        <span class="n">ticker</span><span class="p">:</span> <span class="nc">Stocks</span>
        <span class="n">numShares</span><span class="p">:</span> <span class="kt">int</span>
        <span class="n">price</span><span class="p">:</span> <span class="n">decimal</span>
        <span class="n">allOrNone</span><span class="p">:</span> <span class="kt">bool</span> <span class="p">}</span></code></pre></figure>

<p>And this is what a list of trades would look like:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="p">(</span><span class="n">trades</span><span class="p">:</span> <span class="nc">Trade</span> <span class="kt">list</span><span class="p">)</span> <span class="p">=</span> 
  <span class="p">[</span>
    <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="nc">MSFT</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="o">};</span>
    <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="nc">META</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="o">};</span>
    <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="nc">GOOGL</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="mi">6</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="o">};</span>    
  <span class="p">]</span></code></pre></figure>

<h2 id="trade-module">Trade Module</h2>

<p>We will use the following functions throughout the remainder of this series. The last function <code class="language-plaintext highlighter-rouge">tradeMany</code> will be used to process an order (i.e. a list of Trades).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">let</span> <span class="n">buyOne</span> <span class="n">order</span> <span class="p">=</span> 
    <span class="k">let</span> <span class="n">totalPrice</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">price</span> <span class="p">*</span> <span class="n">decimal</span><span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">numShares</span><span class="p">)</span>
    <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just purchased {order.numShares} shares of {order.ticker} for a total cost of ${totalPrice:N2}."</span> 
    <span class="o">(-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="n">m</span> <span class="p">*</span> <span class="n">totalPrice</span><span class="p">)</span>

  <span class="k">let</span> <span class="n">sellOne</span> <span class="n">order</span> <span class="p">=</span> 
    <span class="k">let</span> <span class="n">totalPrice</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">price</span> <span class="p">*</span> <span class="n">decimal</span><span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">numShares</span><span class="p">)</span>
    <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just sold {order.numShares} shares of {order.ticker} for a total earnings of ${totalPrice:N2}."</span> 
    <span class="n">totalPrice</span>

  <span class="k">let</span> <span class="n">tradeOne</span> <span class="n">order</span> <span class="p">=</span>   
    <span class="k">match</span> <span class="n">order</span><span class="p">.</span><span class="n">buyOrSell</span> <span class="k">with</span>
    <span class="p">|</span> <span class="nc">Buy</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">buyOne</span> <span class="n">order</span><span class="p">)</span>          
    <span class="p">|</span> <span class="nc">Sell</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">sellOne</span> <span class="n">order</span><span class="p">)</span>

  <span class="k">let</span> <span class="n">tradeMany</span> <span class="n">order</span> <span class="p">=</span> 
    <span class="k">let</span> <span class="n">totalOrderPrice</span> <span class="p">=</span> 
      <span class="n">order</span>
      <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">tradeOne</span>
      <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">sum</span>
    <span class="n">printfn</span> <span class="o">$</span><span class="s2">"-------------------------------------------------------------------"</span>
    <span class="k">match</span> <span class="p">(</span><span class="n">totalOrderPrice</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="n">m</span><span class="p">)</span> <span class="k">with</span>
    <span class="p">|</span> <span class="bp">true</span> <span class="p">-&gt;</span> <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just executed a series of trades that earned you ${totalOrderPrice:N2}."</span>
    <span class="p">|</span> <span class="bp">false</span> <span class="p">-&gt;</span> <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just executed a series of trades that cost you ${totalOrderPrice:N2}."</span></code></pre></figure>

<p>And this is the output if you run <code class="language-plaintext highlighter-rouge">Trade.tradeMany trades</code>:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">You just purchased 4 shares of MSFT for a total cost of $</span>1,033.28.
<span class="gp">You just sold 3 shares of META for a total earnings of $</span>476.13.
<span class="gp">You just sold 6 shares of GOOGL for a total earnings of $</span>636.48.
<span class="go">-------------------------------------------------------------------
</span><span class="gp">You just executed a series of trades that earned you $</span>79.33.</code></pre></figure>

<p>The code listing for this series can be found <a href="https://github.com/dlfelps/dsl-examples">here</a>.</p>

<h2 id="next">Next</h2>

<p>In the next post we will see how to use F# <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions">computation expressions</a> to create identical <code class="language-plaintext highlighter-rouge">Trade</code> records.</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Justin Lubin. 2021. How Statically-Typed Functional Programmers Author Code. In Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems (CHI EA ‘21). Association for Computing Machinery, New York, NY, USA, Article 484, 1–6. https://doi.org/10.1145/3411763.3451515 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="dsl" /><category term="ddd" /><summary type="html"><![CDATA[The first post in the domain specific language series explores the basics of domain modeling using record types in F#.]]></summary></entry><entry><title type="html">Experiment 05</title><link href="https://dlfelps.github.io/2022/09/01/List-vs-Seq.html" rel="alternate" type="text/html" title="Experiment 05" /><published>2022-09-01T00:00:00+00:00</published><updated>2022-09-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/09/01/List-vs-Seq</id><content type="html" xml:base="https://dlfelps.github.io/2022/09/01/List-vs-Seq.html"><![CDATA[<p>When should you store data as a list, sequence, or an array? This post explains why you need all three in F#.</p>

<h2 id="introduction">Introduction</h2>

<p>Lists, sequences, and arrays appear interchangeable on the surface - they are all linear collections of elements of the same type. But the architects of F# included all three with good reason. This post explores some of the situations that make each type shine, and dives into the tradeoffs you make when you select one collection over another<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Let’s start with Microsoft’s official definitions:</p>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/arrays">Arrays</a> are fixed-size, zero-based, mutable collections of consecutive data elements that are all of the same type.</li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lists">Lists</a> are ordered, immutable series of elements of the same type.</li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/sequences">Sequences</a> are logical series of elements all of one type.</li>
</ul>

<p>Those definitions are certainly similar, but there are some differences. Next we will compare their syntax.</p>

<p>Basic collections can be created as follows:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">list1</span> <span class="p">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="p">]</span>
<span class="k">let</span> <span class="n">array1</span> <span class="p">=</span> <span class="p">[|</span> <span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="p">|]</span>
<span class="k">let</span> <span class="n">seq1</span> <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="p">}</span></code></pre></figure>

<p>All three collections also support programmatic creation:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">listOfSquares</span> <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span> <span class="mi">10</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">]</span>
<span class="k">let</span> <span class="n">arrayOfSquares</span> <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span> <span class="mi">10</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">|]</span>
<span class="k">let</span> <span class="n">seqOfSquares</span> <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span> <span class="mi">10</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">}</span></code></pre></figure>

<p>The syntax is well-designed - different, but familiar. Now let’s dive into our first scenario.</p>

<h2 id="scenario-1-create-new-collection">Scenario 1 (create new collection)</h2>

<p>This is the most basic scenario - creating a collection. We will use the following timing code (across all scenarios) to capture the performance of individual actions. The action is measured multiple times for multiple trials and a confidence interval is reported in milliseconds.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Stats</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Diagnostics</span>

<span class="k">let</span> <span class="n">extractCI</span> <span class="p">(</span><span class="n">ci</span><span class="p">:</span><span class="nn">Intervals</span><span class="p">.</span><span class="nc">Interval</span><span class="p">&lt;</span><span class="kt">float</span><span class="o">&gt;)</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">ci</span> <span class="k">with</span> 
  <span class="p">|</span> <span class="nn">Intervals</span><span class="p">.</span><span class="nc">ClosedInterval</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="o">((</span><span class="n">b</span><span class="p">-</span><span class="n">a</span><span class="o">)/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="o">+</span><span class="n">a</span><span class="o">,(</span><span class="n">b</span><span class="p">-</span><span class="n">a</span><span class="o">)/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
  <span class="p">|</span> <span class="nn">Intervals</span><span class="p">.</span><span class="nc">Empty</span> <span class="p">-&gt;</span> <span class="o">(-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>  

<span class="k">let</span> <span class="n">calculateCI</span> <span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="n">int64</span> <span class="kt">array</span><span class="p">)</span> <span class="p">=</span> 
  <span class="n">times</span>
  <span class="p">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">toSeq</span>
  <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="p">(</span><span class="k">fun</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
  <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">ConfidenceInterval</span><span class="p">.</span><span class="n">ci</span> <span class="mi">0</span><span class="p">.</span><span class="mi">95</span><span class="p">)</span>
  <span class="p">|&gt;</span> <span class="n">extractCI</span>

<span class="k">let</span> <span class="n">timeIt</span> <span class="n">numTrials</span> <span class="n">numRuns</span> <span class="n">action</span> <span class="p">=</span>
  
  <span class="k">let</span> <span class="n">times</span><span class="p">:</span> <span class="n">int64</span> <span class="kt">array</span> <span class="p">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">zeroCreate</span> <span class="n">outer</span>

  <span class="k">for</span> <span class="n">o</span> <span class="p">=</span> <span class="mi">0</span> <span class="k">to</span> <span class="p">(</span><span class="n">outer</span><span class="p">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> 
    <span class="n">printf</span> <span class="s2">"%d</span><span class="se">\n</span><span class="s2">"</span> <span class="n">o</span>

    <span class="k">let</span> <span class="n">timer</span> <span class="p">=</span> <span class="nc">Stopwatch</span> <span class="bp">()</span>
    <span class="n">timer</span><span class="p">.</span><span class="nc">Start</span><span class="bp">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="p">=</span> <span class="mi">0</span> <span class="k">to</span> <span class="p">(</span><span class="n">inner</span><span class="p">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">action</span> <span class="bp">()</span> <span class="p">|&gt;</span> <span class="n">ignore</span>
    <span class="n">timer</span><span class="p">.</span><span class="nc">Stop</span><span class="bp">()</span>

    <span class="n">times</span><span class="p">[</span><span class="n">o</span><span class="p">]</span> <span class="p">&lt;-</span> <span class="n">timer</span><span class="p">.</span><span class="nc">ElapsedMilliseconds</span>
  <span class="n">calculateCI</span> <span class="n">times</span></code></pre></figure>

<p>Next we list the code to create the collections and calculate performance. The <code class="language-plaintext highlighter-rouge">timeIt</code> command takes three parameters: number of trials (10), number of runs per trial (1000), and a function with signature <code class="language-plaintext highlighter-rouge">unit -&gt; collectionType&lt;T&gt;</code> (e.g. createList has signature <code class="language-plaintext highlighter-rouge">unit -&gt; list&lt;int&gt;</code>).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">createList</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span>
<span class="k">let</span> <span class="n">createSeq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span>
<span class="k">let</span> <span class="n">createArray</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">createList</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">createSeq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">createArray</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result1_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result1_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result1_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-4abff5"></style></head>
    <body>
      <div id="256d9ddf-22e2-493b-8251-8a12b0dfe86e" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-4abff5"><g class="clips"><clippath id="clip4abff5xyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clip4abff5x"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clip4abff5y"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clip4abff5xy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,438.41)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,381.57)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,324.73)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,267.88)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,211.04000000000002)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,154.2)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"><path class="yzl zl crisp" transform="translate(0,495.25)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 2px;"></path></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clip4abff5xyplot)"><g class="scatterlayer mlayer"><g class="trace scatter tracecf04fc" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,21h8m-4,0V87.4m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,395.25h8m-4,0V395.25m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,104.49h8m-4,0V167.62m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,54.2)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,395.25)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,136.05)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="0" data-math="N" transform="translate(0,495.25)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">0</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="5" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,438.41)">5</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="10" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,381.57)">10</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="15" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,324.73)">15</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="20" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,267.88)">20</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="25" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,211.04000000000002)">25</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="30" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,154.2)">30</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-4abff5"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,38.934375,310)" x="38.934375" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-4abff5" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_256d9ddf22e2493b82518a12b0dfe86e = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[30.0,0.0,22.8],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.9204314277830594,0.0,2.7767145029408837]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('256d9ddf-22e2-493b-8251-8a12b0dfe86e', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_256d9ddf22e2493b82518a12b0dfe86e();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_256d9ddf22e2493b82518a12b0dfe86e();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Arrays were created marginally faster than lists, but it appears that sequences were created almost instantaneously. Well that isn’t 100% true - sequences are <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lazy-expressions">lazy</a>, which means that they aren’t evaluated until they are needed. And since the code never used the sequence it was never actually created. In the next scenario we will <em>use</em> the elements.</p>

<h2 id="scenario-2-sequential-access">Scenario 2 (sequential access)</h2>

<p>This scenario measures the performance of a common use for data structures - sequential access. Sequential access occurs when you access elements in a predetermined, ordered sequence (e.g. iterating through the elements in a <code class="language-plaintext highlighter-rouge">for</code> loop).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">sumSequential</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">e</span> <span class="k">in</span> <span class="n">lst</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">e</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumList</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="n">sumSequential</span>
<span class="k">let</span> <span class="n">sumSeq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">|&gt;</span> <span class="n">sumSequential</span>
<span class="k">let</span> <span class="n">sumArray</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span> <span class="p">|&gt;</span> <span class="n">sumSequential</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumList</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumSeq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumArray</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result2_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result2_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result2_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-9ba216"></style></head>
    <body>
      <div id="7d25a429-d066-4138-84c0-56a5364f1f99" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-9ba216"><g class="clips"><clippath id="clip9ba216xyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clip9ba216x"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clip9ba216y"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clip9ba216xy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,500.71)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,446.67)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,392.62)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,338.57)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,284.52)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,230.48)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,176.43)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,122.38)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clip9ba216xyplot)"><g class="scatterlayer mlayer"><g class="trace scatter trace4a67af" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,21h8m-4,0V131.86m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,342.97h8m-4,0V399m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,255.28h8m-4,0V324.56m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,76.43)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,370.99)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,289.92)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="22" data-math="N" transform="translate(0,500.71)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">22</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="24" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,446.67)">24</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="26" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,392.62)">26</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="28" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,338.57)">28</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="30" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,284.52)">30</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="32" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,230.48)">32</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="34" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,176.43)">34</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="36" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,122.38)">36</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-9ba216"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,38.934375,310)" x="38.934375" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-9ba216" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_7d25a429d066413884c056a5364f1f99 = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[34.0,23.1,26.1],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.0512436221381147,1.0366503196701657,1.2818886588017158]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('7d25a429-d066-4138-84c0-56a5364f1f99', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_7d25a429d066413884c056a5364f1f99();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_7d25a429d066413884c056a5364f1f99();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Sequences had the fastest time, followed by array and list respectively. Given that there are only a few milliseconds between the conditions and each condition includes 1000 repetitions, the difference for a single execution is only a few microseconds - hardly worth optimizing in my opinion.</p>

<p><em>NOTE: the times above include the time to create a collection PLUS the time to sum its elements. I included the time to create the collection so that times could be better compared across scenarios; this will be true for all following scenarios.</em></p>

<h2 id="scenario-3-random-access">Scenario 3 (random access)</h2>

<p>The third scenario measures the performance of a collection with respect to its ability to perform random access (sometimes called direct access). Random access is the ability to access an arbitrary element of a sequence.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/Random_vs_sequential_access.svg" alt="Sequential vs Random access" title="Sequential vs Random access" /></p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">sumListRandomAccess</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">25</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lst</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">item</span> <span class="p">(</span><span class="mi">40</span><span class="p">*</span><span class="n">i</span><span class="o">))</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumSeqRandomAccess</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">25</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lst</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">item</span> <span class="p">(</span><span class="mi">40</span><span class="p">*</span><span class="n">i</span><span class="o">))</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumArrayRandomAccess</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">25</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lst</span> <span class="p">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">item</span> <span class="p">(</span><span class="mi">40</span><span class="p">*</span><span class="n">i</span><span class="o">))</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumList</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="n">sumListRandomAccess</span>
<span class="k">let</span> <span class="n">sumSeq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">|&gt;</span> <span class="n">sumSeqRandomAccess</span>
<span class="k">let</span> <span class="n">sumArray</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span> <span class="p">|&gt;</span> <span class="n">sumArrayRandomAccess</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumList</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumSeq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumArray</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result3_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result3_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result3_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-67eaea"></style></head>
    <body>
      <div id="7504a926-d870-436f-aaeb-bec9481da118" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-67eaea"><g class="clips"><clippath id="clip67eaeaxyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clip67eaeax"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clip67eaeay"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clip67eaeaxy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,430.66)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,329.74)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,228.82)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,127.91)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clip67eaeaxyplot)"><g class="scatterlayer mlayer"><g class="trace scatter trace442fae" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,331.99h8m-4,0V341.85m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,21h8m-4,0V51.36m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,391.52h8m-4,0V398.98m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,336.92)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,36.18)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,395.25)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="50" data-math="N" transform="translate(0,430.66)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">50</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="100" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,329.74)">100</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="150" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,228.82)">150</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="200" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,127.91)">200</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-67eaea"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,31.309375000000003,310)" x="31.309375000000003" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-67eaea" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_7504a926d870436faaebbec9481da118 = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[46.9,195.9,18.0],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.4422444309661486,7.52126861364431,1.8470430124264041]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('7504a926-d870-436f-aaeb-bec9481da118', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_7504a926d870436faaebbec9481da118();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_7504a926d870436faaebbec9481da118();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Here we see the main reason to avoid sequences - they have terrible random access times. Arrays are faster than lists, but you must know how many elements they will contain at compile time.</p>

<h2 id="scenario-4-search-and-count">Scenario 4 (search and count)</h2>

<p>In this scenario I implement a common processing task - count the number of occurrences of a target element in a given collection. In the code below, the target element is <code class="language-plaintext highlighter-rouge">5</code>.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">count5List</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="p">(</span><span class="k">fun</span> <span class="n">elem</span> <span class="p">-&gt;</span> <span class="n">elem</span> <span class="p">=</span> <span class="mi">5</span><span class="o">))</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">count5Seq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="p">(</span><span class="k">fun</span> <span class="n">elem</span> <span class="p">-&gt;</span> <span class="n">elem</span> <span class="p">=</span> <span class="mi">5</span><span class="o">))</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">count5Array</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">filter</span> <span class="p">(</span><span class="k">fun</span> <span class="n">elem</span> <span class="p">-&gt;</span> <span class="n">elem</span> <span class="p">=</span> <span class="mi">5</span><span class="o">))</span> <span class="p">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">count5List</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">count5Seq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">count5Array</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result4_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result4_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result4_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-db0b89"></style></head>
    <body>
      <div id="d9344cd5-2e42-40d7-871e-e79075064f5d" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-db0b89"><g class="clips"><clippath id="clipdb0b89xyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clipdb0b89x"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clipdb0b89y"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clipdb0b89xy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,462.35)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,400.22)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,338.09000000000003)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,275.96000000000004)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,213.82999999999998)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,151.7)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clipdb0b89xyplot)"><g class="scatterlayer mlayer"><g class="trace scatter trace80771f" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,21h8m-4,0V163.18m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,118.48h8m-4,0V239.66m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,251.15h8m-4,0V399m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,92.09)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,179.07)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,325.07)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="22" data-math="N" transform="translate(0,462.35)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">22</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="24" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,400.22)">24</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="26" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,338.09000000000003)">26</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="28" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,275.96000000000004)">28</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="30" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,213.82999999999998)">30</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="32" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,151.7)">32</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-db0b89"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,38.934375,310)" x="38.934375" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-db0b89" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_d9344cd52e4240d7871ee79075064f5d = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[30.7,27.9,23.2],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.288396100060293,1.9503584791198811,2.379748452460955]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('d9344cd5-2e42-40d7-871e-e79075064f5d', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_d9344cd52e4240d7871ee79075064f5d();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_d9344cd52e4240d7871ee79075064f5d();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Similar to the results of <a href="#scenario-2-sequential-access">Scenario 2</a>, the difference here is not really worth optimizing.</p>

<h2 id="scenario-5-pattern-match-and-recursion">Scenario 5 (pattern match and recursion)</h2>

<p>Pattern matching is one of my favorite pieces of F# syntax. Besides being extremely readable, the F# compiler will ensure that the patterns check all possible cases. When it comes to processing collections, however, you must use lists to enjoy the full power of pattern matching. Lists are also the only collection that can be used with recursive functions. The example below restates the <code class="language-plaintext highlighter-rouge">count5</code> problem from Scenario 4 using a recursive function with pattern matching.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="k">rec</span> <span class="n">countMatch</span> <span class="n">target</span> <span class="n">sumSoFar</span> <span class="n">lst</span>  <span class="p">=</span> 
  <span class="k">match</span> <span class="n">lst</span> <span class="k">with</span>
  <span class="p">|</span> <span class="bp">[]</span> <span class="p">-&gt;</span> <span class="n">sumSoFar</span>
  <span class="p">|</span> <span class="n">head</span> <span class="p">::</span> <span class="n">tail</span> <span class="p">-&gt;</span> <span class="k">if</span> <span class="n">head</span> <span class="p">=</span> <span class="n">target</span> <span class="k">then</span> <span class="n">countMatch</span> <span class="n">target</span> <span class="p">(</span><span class="n">sumSoFar</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="n">tail</span> <span class="k">else</span> <span class="n">countMatch</span> <span class="n">target</span> <span class="n">sumSoFar</span> <span class="n">tail</span>


<span class="k">let</span> <span class="n">count5List</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="n">countMatch</span> <span class="mi">5</span> <span class="mi">0</span><span class="p">)</span></code></pre></figure>

<p>(This function only works for lists and is about 3 times slower than the equivalent function for lists from Scenario 4.)</p>

<h2 id="scenario-6-interoperability">Scenario 6 (interoperability)</h2>

<p>In my opinion the final scenario describes the most important criteria for selecting a collection - interoperability. Sequences are represented by the <code class="language-plaintext highlighter-rouge">seq&lt;T&gt;</code> type, which is an alias for <code class="language-plaintext highlighter-rouge">IEnumerable&lt;T&gt;</code>. Therefore, any .NET type that implements <code class="language-plaintext highlighter-rouge">IEnumerable&lt;T&gt;</code> interface can be used as a sequence. I actually used this convenience in <a href="#scenario-2-sequential-access">Scenario 2</a> to create the <code class="language-plaintext highlighter-rouge">sumSequential</code> function - its inferred type is <code class="language-plaintext highlighter-rouge">seq&lt;int&gt; -&gt; int</code>. So you can use <code class="language-plaintext highlighter-rouge">Seq.length</code> to calculate the number of elements in sequences, lists, or arrays.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">testSeq</span> <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">}</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">testList</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">]</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">testArray</span> <span class="p">=</span> <span class="p">[|</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">|]</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span></code></pre></figure>

<p>For this reason, it is recommended to accept sequences in public facing functions (i.e. those that will be imported by other .NET projects). But that doesn’t mean you should only use sequences in libraries - if you need to perform pattern matching you can always convert the input sequence to a list<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope that this post has helped you get a better feel for collections in F#. I will end this post with a flowchart that you can use to guide you if you are having trouble.</p>

<p><img src="/assets/images/mermaid-diagram-2022-09-07-063841.svg" alt="Collection flow diagram" title="Collection flow diagram" /></p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>F# has specialized collection types that are designed from a functional programming perspective rather than an object-oriented perspective (compare with those found in System.Collections.Generic). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>It is always possible to convert to and from any collection type. For example, you can convert a list <strong>to</strong> a sequence using <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#toSeq"><code class="language-plaintext highlighter-rouge">List.toSeq</code></a>. Conversely, you can create a list <strong>from</strong> a sequence using <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#ofSeq"><code class="language-plaintext highlighter-rouge">List.ofSeq</code></a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="list" /><category term="seq" /><category term="collections" /><summary type="html"><![CDATA[When should you store data as a list, sequence, or an array? This post explains why you need all three in F#.]]></summary></entry><entry><title type="html">Experiment 04</title><link href="https://dlfelps.github.io/2022/07/06/Reproducible-Example.html" rel="alternate" type="text/html" title="Experiment 04" /><published>2022-07-06T00:00:00+00:00</published><updated>2022-07-06T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/07/06/Reproducible-Example</id><content type="html" xml:base="https://dlfelps.github.io/2022/07/06/Reproducible-Example.html"><![CDATA[<p>In the final post of the series I give a practical example of how to incorporate continuously reproducible strategies into your workflow.</p>

<h2 id="introduction">Introduction</h2>

<p>In the <a href="/2022/06/20/Reproducible-Dotnet-Series.html">first post</a> in this <a href="/tags/reproducible/">series</a> I described the characteristics of reproducible code. In the <a href="/2022/06/25/Reproducible-Foundations.html">second post</a> I described the foundational tools that I use in my approach to creating continuously reproducible code. This final post incorporates the approach into an existing repository.</p>

<h2 id="example">Example</h2>

<p>I selected <a href="https://github.com/fsprojects/FsHttp">FsHttp</a> as a demonstration codebase. FsHttp follows many recommendations of the continuously reproducible mindset (i.e. LTS releases, pinned dependencies), but it lacks continuous integration. I will show two different ways to adopt it.</p>

<h2 id="approach-1-net-variant">Approach #1 (.NET variant)</h2>

<p>The preferred way for .NET projects is to use .NET directly to verify the build. I forked the FsHttp repo and removed some parts that were unnecessary to this blog post. You can find that fork <a href="https://github.com/dlfelps/FsHttp-dotnet">here</a>.</p>

<p>Since the repository is already on Github I will use Github Actions to implement continuous integration. If you use another continuous integration platform you will have to translate this example into that platform’s workflow syntax.</p>

<p>Adding continuous integration is as easy as creating the <code class="language-plaintext highlighter-rouge">.github\workflows</code> folder at the base of the repository and then adding the workflow YAML file, which I named <a href="https://github.com/dlfelps/FsHttp-dotnet/blob/main/.github/workflows/dotnet.yml">dotnet.yml</a> to that folder. Here are the contents of that file:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">Dotnet CI</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>
  
<span class="na">jobs</span><span class="pi">:</span>     
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-20.04</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout main</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup .NET</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-dotnet@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">dotnet-version</span><span class="pi">:</span> <span class="s">6.0.301</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Restore dependencies</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet restore</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet build --no-restore</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet test --verbosity normal</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now let’s breakdown each step.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">name</span><span class="pi">:</span> <span class="s">Dotnet CI</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>  </code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">name</code> keyword allows you to name the workflow - workflows will be grouped by name under the projects Action tab. The <code class="language-plaintext highlighter-rouge">on</code> keyword allows you to specify the conditions for which this workflow executes - here I only execute the workflow when I push to the <code class="language-plaintext highlighter-rouge">main</code> branch.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">jobs</span><span class="pi">:</span>     
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-20.04</span></code></pre></figure>

<p>The next block defines the sequence of <code class="language-plaintext highlighter-rouge">jobs</code> to execute when the workflow conditions are met. In this workflow I have only one job named <code class="language-plaintext highlighter-rouge">build</code> (define additional jobs at the same indentation level as <code class="language-plaintext highlighter-rouge">build</code>). The <code class="language-plaintext highlighter-rouge">runs-on</code> keyword selects the type of machine to run the job on; other options include <code class="language-plaintext highlighter-rouge">windows-2022</code> and <code class="language-plaintext highlighter-rouge">macos-11</code>. The full list of available options is <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on">here</a>. <em>NOTE</em>: prefer <code class="language-plaintext highlighter-rouge">ubuntu-20.04</code> to <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> even though they are currently equivalent; <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> will eventually point to <code class="language-plaintext highlighter-rouge">ubuntu-22.04</code> so it is better to pin the dependency now.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout main</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span></code></pre></figure>

<p>Each job consists of several <code class="language-plaintext highlighter-rouge">steps</code>; each step includes an optional name and then an action. The first step <code class="language-plaintext highlighter-rouge">uses</code> a Github Action to check out the <code class="language-plaintext highlighter-rouge">main</code> branch. There are several <a href="https://github.com/orgs/actions/repositories">official Github actions</a> and also over 14,000 user contributed actions available through the <a href="https://github.com/marketplace?type=actions">Github Marketplace</a>. I tend to stick to the official actions since there are potentially some <a href="https://www.youtube.com/watch?v=bDG40Y1nPEk">security concerns</a> when using them. Also notice the <code class="language-plaintext highlighter-rouge">@v3</code> appended to the end of the <code class="language-plaintext highlighter-rouge">actions/checkout</code> action - this pins the version of the action.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup .NET</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-dotnet@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">dotnet-version</span><span class="pi">:</span> <span class="s">6.0.301</span></code></pre></figure>

<p>The next step users another official action to install .NET 6. This action is actually redundant since the <code class="language-plaintext highlighter-rouge">ubuntu-20.04</code> runner actually comes <a href="https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md">pre-installed</a> with lots of useful software including .NET 6. However, I chose to add this step since this was an explicit dependency that the build relies upon. I can’t be sure that Github will always include it with the runner, so I want to explicitly install it.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Restore dependencies</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet restore</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet build --no-restore</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet test --verbosity normal</span></code></pre></figure>

<p>The final three steps restore the project’s dependencies, build, and test the project.</p>

<h3 id="visualizing-the-workflow">Visualizing the workflow</h3>

<p>If you push this workflow file to the repo’s <code class="language-plaintext highlighter-rouge">main</code> branch it will execute for the first time. You can watch its progress by clicking on the <code class="language-plaintext highlighter-rouge">Actions</code> button from the repository’s main page. Then click on the most recent run, which will have the same name as the message of the most recent commit.</p>

<p><img src="/assets/images/workflow1.png" alt="Github Actions screenshot #1" title="Github Actions screenshot #1" /></p>

<p>Then you can visualize the jobs contained within the workflow (there was only a single job named <code class="language-plaintext highlighter-rouge">build</code> in <code class="language-plaintext highlighter-rouge">dotnet.yml</code>). Clicking the <code class="language-plaintext highlighter-rouge">build</code> box will provide details of each step.</p>

<p><img src="/assets/images/workflow2.png" alt="Github Actions screenshot #2" title="Github Actions screenshot #2" /></p>

<p>Here we see the names given to each of the steps along with some automatic setup and teardown steps.</p>

<p><img src="/assets/images/workflow3.png" alt="Github Actions screenshot #3" title="Github Actions screenshot #3" /></p>

<h3 id="results">Results</h3>

<p>In the <a href="/2022/06/25/Reproducible-Foundations.html">previous post</a> we defined the following criteria for reproducible software:</p>

<blockquote>
  <ol>
    <li>Build from any platform <strong>with the help of one pre-installed dependency</strong></li>
    <li>Satisfy #1 in a standard and lightweight way across codebases</li>
  </ol>
</blockquote>

<p>Did we satisfy them? Adding a Github workflow is certainly lightweight and repeatable since it will work for most .NET projects with little modification. But we didn’t explicity verify the first criteria since we only tested from Ubuntu. If you want to explicitly test additional platforms then I would recommend defining additional jobs that build in different environments:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">jobs</span><span class="pi">:</span>     
  <span class="na">build-linux</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-20.04</span>
    <span class="c1"># steps...</span>
  
  <span class="na">build-windows</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">windows-2022</span>
    <span class="c1"># steps...</span>

  <span class="na">build-macos</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">macos-11</span>
    <span class="c1"># steps...</span></code></pre></figure>

<p>But since I assume that .NET 6 is installed on the host platform I don’t really need to test the other operating systems - if it compiles on one platform it will compile on the others because .NET compiles to Common Intermediate Language. The runtimes for each platform differ, but that is an isolated component that I don’t feel the need to verify. I think this is a big win for Microsoft and one of the reasons that I ❤️ .NET!</p>

<h2 id="approach-2-not-net-variant">Approach #2 (Not .NET variant)</h2>

<p>How difficult is it to translate Approach #1 into another language? I was able to convert a popular Golang repo in about 5 minutes. You will notice the similarities in the workflow; the full repo is <a href="https://github.com/dlfelps/cobra-go">here</a>.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">Go CI</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>
  
<span class="na">jobs</span><span class="pi">:</span>     
  <span class="na">build-linux</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-20.04</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout commit</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup Go</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-go@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">go-version</span><span class="pi">:</span> <span class="m">1.18</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">go build</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">go test .</span>

  <span class="na">build-macos</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">macos-11</span>
    <span class="c1"># steps...</span>

  <span class="na">build-windows</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">windows-2022</span>
    <span class="c1"># steps...</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="results-1">Results</h3>

<p>This variant also meets the necessary criteria with one gotcha - since Golang compiles directly to machine code you need to add additional build jobs to test other platforms. Definitely still doable since Github also includes Golang in its machine images.</p>

<h2 id="approach-3-docker-variant">Approach #3 (Docker variant)</h2>

<p><em>Basic knowledge of Docker required to follow this tutorial.</em></p>

<p>I know a lot of developers that really love Docker and they use it for everything. I use Docker to deploy services, but not for my development environment. It tends to add an extra step that I don’t really want while I am coding. But I also don’t tend to work on multiple projects simultaneously (each using a different version of something). Still, its simple enough to integrate Docker into the continuous integration workflow. If I was required to build a Docker image for a project then this is probably how I would do it (rather than building it locally). Here is the full <a href="https://github.com/dlfelps/FsHttp-docker">repo</a> and here are the contents of its workflow YAML:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">Docker Image CI</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>

  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout commit</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build the Docker image</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">docker build . --file Dockerfile --tag fshttp:$(date +%s)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The workflow only includes two steps - one to checkout the <code class="language-plaintext highlighter-rouge">main</code> branch and another to build the <code class="language-plaintext highlighter-rouge">Dockerfile</code>. The remaining steps are now inside the <code class="language-plaintext highlighter-rouge">Dockerfile</code>:</p>

<figure class="highlight"><pre><code class="language-docker" data-lang="docker"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="k">FROM</span><span class="s"> mcr.microsoft.com/dotnet/sdk:6.0</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="k">COPY</span><span class="s"> . ./</span>
<span class="k">RUN </span>dotnet restore 
<span class="k">RUN </span>dotnet build <span class="nt">--no-restore</span>
<span class="k">RUN </span>dotnet <span class="nb">test</span> <span class="nt">--verbosity</span> normal
</pre></td></tr></tbody></table></code></pre></figure>

<p>The Dockerfile uses the standard .NET 6 baseimage provided by Microsoft, copies the new commit into the /app folder, and then restore/build/test.</p>

<h3 id="results-2">Results</h3>

<p>This variant is still lightweight, but we must look closely to see if it is truly cross-platform. We have changed our dependency assumption from .NET to Docker - any platform that can run Docker can build this code. If this is a .NET project then any code that successfully compiles to the Common Intermediate Language and passes the test suite will work on any platform (.NET for the win)! But what if its a Golang project? In that case we would need a separate job and Dockerfile for each platform. But there is no such thing as a macOS Docker image! In conclusion, Approach #3 meets the reproducibility criteria for all .NET projects, but not <em>all</em> projects.</p>

<h2 id="approach-4-nuke-variant">Approach #4 (NUKE variant)</h2>

<p><em>Update 7/17/2022 - A reader suggested I also compare the NUKE build system.</em></p>

<p>The <a href="https://nuke.build/">NUKE</a> build system has a unique way of creating continuous integration pipelines - unlike the previous three approaches, developers don’t manually create the YAML file. Instead they use the NUKE build tool to create a seperate .NET project and then specify the build process using NUKE’s extensive library. Running this project builds the primary solution and also generates any required artifacts (e.g. GitHub Actions YAML file). This makes NUKE’s build process sound complicated, but from a user’s perspective it is dead simple - they launch a single bootstrap script.</p>

<p><img src="/assets/images/mermaid-diagram-2022-07-18-061249.svg" alt="NUKE flow diagram" title="NUKE flow diagram" /></p>

<p>I appreciate this build strategy because it isolates the custom part of the build process to the build project and uses a standard bootstrap script across projects. Here are the contents of <code class="language-plaintext highlighter-rouge">Build.cs</code> from the build project:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="p">[</span><span class="nf">GitHubActions</span><span class="p">(</span>
    <span class="s">"continuous"</span><span class="p">,</span>
    <span class="n">GitHubActionsImage</span><span class="p">.</span><span class="n">UbuntuLatest</span><span class="p">,</span>
    <span class="n">OnPushBranches</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span><span class="s">"main"</span><span class="p">},</span>
    <span class="n">InvokedTargets</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="k">nameof</span><span class="p">(</span><span class="n">Test</span><span class="p">)</span> <span class="p">})]</span>
<span class="k">class</span> <span class="nc">Build</span> <span class="p">:</span> <span class="n">NukeBuild</span>
<span class="p">{</span>

    <span class="p">[</span><span class="n">Solution</span><span class="p">]</span> <span class="k">readonly</span> <span class="n">Solution</span> <span class="n">Solution</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">Main</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Execute</span><span class="p">&lt;</span><span class="n">Build</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Test</span><span class="p">);</span>

    <span class="p">[</span><span class="nf">Parameter</span><span class="p">(</span><span class="s">"Configuration to build - Default is 'Debug' (local) or 'Release' (server)"</span><span class="p">)]</span>
    <span class="k">readonly</span> <span class="n">Configuration</span> <span class="n">Configuration</span> <span class="p">=</span> <span class="n">IsLocalBuild</span> <span class="p">?</span> <span class="n">Configuration</span><span class="p">.</span><span class="n">Debug</span> <span class="p">:</span> <span class="n">Configuration</span><span class="p">.</span><span class="n">Release</span><span class="p">;</span>

    <span class="n">Target</span> <span class="n">Restore</span> <span class="p">=&gt;</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">_</span>
        <span class="p">.</span><span class="nf">Executes</span><span class="p">(()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
          <span class="nf">DotNetRestore</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">_</span>
            <span class="p">.</span><span class="nf">SetProjectFile</span><span class="p">(</span><span class="n">Solution</span><span class="p">));</span>
        <span class="p">});</span>

    <span class="n">Target</span> <span class="n">Compile</span> <span class="p">=&gt;</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">_</span>
        <span class="p">.</span><span class="nf">DependsOn</span><span class="p">(</span><span class="n">Restore</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Executes</span><span class="p">(()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
          <span class="nf">DotNetBuild</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">_</span>
            <span class="p">.</span><span class="nf">SetProjectFile</span><span class="p">(</span><span class="n">Solution</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">EnableNoRestore</span><span class="p">());</span>
        <span class="p">});</span>

    <span class="n">Target</span> <span class="n">Test</span> <span class="p">=&gt;</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">_</span>
      <span class="p">.</span><span class="nf">DependsOn</span><span class="p">(</span><span class="n">Compile</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">Executes</span><span class="p">(()</span> <span class="p">=&gt;</span>
      <span class="p">{</span>
        <span class="nf">DotNetTest</span><span class="p">();</span>
      <span class="p">});</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The first thing to notice is that this is proper C# code - <em>not</em> YAML. Starting from the top, the <code class="language-plaintext highlighter-rouge">GitHubActions</code> attribute before the <code class="language-plaintext highlighter-rouge">Build</code> class specifies which continuous integration platform YAML<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> NUKE should create as part of the build process. Then - like the previous approaches - we define seperate targets for <code class="language-plaintext highlighter-rouge">Restore</code>, <code class="language-plaintext highlighter-rouge">Compile</code>, and <code class="language-plaintext highlighter-rouge">Test</code>. But unlike previous approaches these targets are not strings; instead they are symbols that can be type checked and debugged. Targets can be further refined using NUKE’s <a href="https://nuke.build/docs/fundamentals/targets/">Fluent API</a>, but I kept things pretty simple here. When the project runs a valid GitHubActions YAML is created:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">continuous</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">ubuntu-latest</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cache .nuke/temp, ~/.nuget/packages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">.nuke/temp</span>
            <span class="s">~/.nuget/packages</span>
          <span class="na">key</span><span class="pi">:</span> <span class="s">$-$</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run './build.cmd Test'</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">./build.cmd Test</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>It is a simple YAML that checks out the code and launches the build script. If we push these updates to Github (e.g. <a href="https://github.com/dlfelps/FsHttp-nuke">FsHTTP-nuke</a>) then the GitHub Actions will automatically test the build:</p>

<p><img src="/assets/images/nuke-github.png" alt="NUKE github actions" title="NUKE build on Github Actions" /></p>

<h3 id="results-3">Results</h3>

<p>NUKE was able to restore our original definition of reproducibility since it does not assume that .NET (or Docker) is installed:</p>

<blockquote>
  <ol>
    <li>Build from a clean environment on any platform</li>
    <li>Satisfy #1 in a standard, lightweight, repeatable way across codebases</li>
  </ol>
</blockquote>

<p>NUKE’s approach is slightly more involved than the creating the YAML file directly, but for a little more work you get a build specification that can be type checked and debugged that is compatible with almost any continuous integration platform. And unlike CAKE/FAKE, NUKE has a very gradual learning curve - you can get started easily and master more over time. Sadly, NUKE is only for .NET projects so if you are using another language you will have to try <strong>Approach #2 or #3</strong>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>You may choose whichever approach fits best within your current development workflow. My recommendations are as follows:</p>
<ol>
  <li>If this is your first attempt at creating a reproducible build then follow <strong>Approach #1</strong></li>
  <li>If your project is <em>NOT</em> a .NET project then follow <strong>Approach #2</strong></li>
  <li>Otherwise follow <strong>Approach #4</strong></li>
</ol>

<p>Finally, thanks for reading this series on continuously reproducible code and I hope I have helped you develop a more continuously reproducible mindset! As always, your feedback is appreciated!</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>NUKE supports many popular CI/CD platforms out of the box (i.e. AppVeyor, Azure Pipelines, Bitbucket, GitHub Actions, GitLab, Jenkins, Space Automation, and TeamCity). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="reproducible" /><category term="net" /><category term="docker" /><category term="ci/cd" /><summary type="html"><![CDATA[In the final post of the series I give a practical example of how to incorporate continuously reproducible strategies into your workflow.]]></summary></entry><entry><title type="html">Experiment 03</title><link href="https://dlfelps.github.io/2022/06/25/Reproducible-Foundations.html" rel="alternate" type="text/html" title="Experiment 03" /><published>2022-06-25T00:00:00+00:00</published><updated>2022-06-25T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/06/25/Reproducible-Foundations</id><content type="html" xml:base="https://dlfelps.github.io/2022/06/25/Reproducible-Foundations.html"><![CDATA[<p>This post describes the approach that I use to make my code reproducible. NOTE: I have only tested this on <em>smallish</em> projects and there certainly are other ways to create reproducible software.</p>

<h2 id="introduction">Introduction</h2>

<p>The <a href="/2022/06/20/Reproducible-Dotnet-Series.html">first post</a> in this <a href="/tags/reproducible/">series</a> described the characteristics of reproducible code. This post describes my approach to meeting the following requirements of reproducible software:</p>

<blockquote>
  <ol>
    <li>Build from a clean environment on any platform</li>
    <li>Satisfy #1 in a standard, lightweight, repeatable way across codebases</li>
  </ol>
</blockquote>

<p>My initial attempts at satisfying these requirements failed. Custom build tools (i.e. <a href="https://cakebuild.net/">CAKE</a>/<a href="https://fake.build/">FAKE</a>) were too cumbersome and assumed .NET was already installed (i.e. not a clean environment). Docker dev environments were a quick way to create one-time reproducible builds, but they also assumed Docker was installed. Installing from a purely clean environment seemed at odds with a lightweight build process. So I amended the requirements slightly:</p>

<blockquote>
  <ol>
    <li>Build from any platform <strong>with the help of one pre-installed dependency</strong></li>
    <li>Satisfy #1 in a standard, lightweight, repeatable way across codebases</li>
  </ol>
</blockquote>

<p>This small change was sufficient for me to devise an approach for continuously reproducible code.</p>

<h2 id="my-continuously-reproducible-approach">(My) Continuously reproducible approach</h2>

<p>My approach is essentially continuous integration<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> plus the <a href="https://dlfelps.github.io/2022/06/20/Reproducible-Dotnet-Series.html#the-continuously-reproducible-mindset">continuously reproducible mindset</a>. Continuous integration ensures that the build works now and the continuously reproducible mindset maximizes the chance that it will work even if left dormant for a period of time. I assume that the most recent LTS version of .NET is installed (this is currently .NET 6.0 which can be installed on any major platform); this assumption lets me use .NET to restore dependencies, build, and test the project. For projects outside of .NET, I assume that Docker is installed instead. I provide an example of both of these in the final post.</p>

<p>By following this approach you can verify that your project builds from a (mostly) clean environment and have confidence that it will work continue to work for anyone else for <em>years</em> to come. If you have improvements or would like to share a different approach I would love to hear about it!</p>

<h4 id="footnotes">Footnotes</h4>

<!--

1. Intro
  - need for reproducibility
  - in science
  - in software
  - in machine learning

2. Basic tools
  - Docker (links to learning resources)
  - Gitlab/Github 
  - CI/CD
  - permissive licensing

3. Producing reporducible builds
  - choice of baseline (LTS)
  - provide multiple options (multiple-platforms)
    - local install w/ ci/cd
    - docker-compose local (build)
  - push build complexity to lowest level

4. CI/CD
  - Gitlab runner w/ docker
  - (optional) docker registry

5. Publishing
  - code should be publish to allow someone (most likely yourself) to reproduce it
  - but it shouldnt be required; also provide standalone executables

-->
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Continuous integration is the DevOps practice whereby code changes are regularly merged into a central repository and the entire project is automatically built and tested. Some common platforms for continuous integration are <a href="https://www.jetbrains.com/teamcity/">TeamCity</a>, <a href="https://www.jenkins.io/">Jenkins</a>, <a href="https://circleci.com/">CircleCI</a>, <a href="https://github.com/features/actions">Github Actions</a>, and <a href="https://gitlab.com/">Gitlab</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="reproducible" /><category term="net" /><category term="docker" /><category term="ci/cd" /><summary type="html"><![CDATA[This post describes the approach that I use to make my code reproducible. NOTE: I have only tested this on smallish projects and there certainly are other ways to create reproducible software.]]></summary></entry><entry><title type="html">Experiment 02</title><link href="https://dlfelps.github.io/2022/06/20/Reproducible-Dotnet-Series.html" rel="alternate" type="text/html" title="Experiment 02" /><published>2022-06-20T00:00:00+00:00</published><updated>2022-06-20T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/06/20/Reproducible-Dotnet-Series</id><content type="html" xml:base="https://dlfelps.github.io/2022/06/20/Reproducible-Dotnet-Series.html"><![CDATA[<p>The next few posts take step back to examine the benefits of creating reproducible software. We will explore:</p>
<ul>
  <li>the continuously reproducible mindset (this post)</li>
  <li>foundational tools for reproducibility (<a href="/2022/06/25/Reproducible-Foundations.html">Exp 03</a>)</li>
  <li>creating a continuously reproducible .NET project (<a href="/2022/07/06/Reproducible-Example.html">Exp 04</a>)</li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>Scientific experiments must be repeatable and reproducible to be considered scientific. Reproducibility in software is optional - software that works but is not reproducible is still successful software. I hope to convince you that the overhead required to create reproducible software is low compared to the benefits that it provides future developers, even if the only future developer is you.</p>

<h2 id="defining-reproducible-software">Defining reproducible software</h2>

<p>It is useful to clarify our definition of reproducibility within the context of software development. Let P<sub>0</sub> represent a stable, compiling build of a codebase that results in a <em>correct</em> program. The reproducibility test for P<sub>0</sub> is as follows:</p>

<blockquote>
  <p>Does the code/documentation for P<sub>0</sub> contain sufficient information to reproduce the <em>correct</em> program from a clean environment? (Yes/No)</p>
</blockquote>

<p>Next, let P<sub>1</sub> represent the code (in the new environment) that has undergone a substantial change that <em>modified the build environment.</em> We can reapply the reproducibilty test to P<sub>1</sub>. The number of times that code passes the reproducibility test can be defined as its reproducibility level [0..N].</p>

<p>It may be useful to name a few of these levels.</p>

<ul>
  <li><em>Irreproducible</em> - Reproducibility level 0; P<sub>0</sub> failed the reproducibility test.</li>
  <li><em>One-time reproducible</em> - Reproducibility level 1; P<sub>0</sub> passed the reproducibility test, but P<sub>1</sub> failed.</li>
  <li><em>Continuously reproducible</em> - Reproducibility level 2+; If P<sub>0</sub> and P<sub>1</sub> pass the reproducibility test then it is indicitave that the code is written in a way that supports reproducibility for future generations of the code.</li>
</ul>

<h2 id="the-continuously-reproducible-mindset">The continuously reproducible mindset</h2>

<p>How many times have you pulled a project from Github only to have it fail to compile?</p>

<blockquote>
  <p>It works on my machine ¯\_(ツ)_/¯</p>
</blockquote>

<p>We can reduce this problem by expanding our mindset to strive for <strong>continuously reproducible</strong> code. The key to creating continuously reproducible code is create a simple workflow that rebuilds the project from a clean environment (preferably Windows, Linux, and OSX). This allows you to isolate undocumented side-effects that can occur in your local development environment (e.g. relying on a tool available locally that is not installed during the build process).</p>

<p>Continuosly reproducible code balances the need to solve the current problem with the need to redeploy the codebase to new systems. If this doesn’t seem worthwhile, then it might be helpful to imagine that your code (P<sub>0</sub>) will be extended by a different developer in a substantial way (P<sub>1</sub>) before it is returned to you for another round of development (P<sub>2</sub>). The time spent during the initial phase of development to create a build process that is easy to replicate across platforms (and modify as needed) will payoff in the long run.</p>

<p>But what if you are the only developer that will ever use this code? I have  found the continuously reproducible mindset to be helpful in my personal projects for tracking down build-related problems and ensuring that my code works even after long pauses in active development.</p>

<h2 id="measuring-the-longevity-of-a-build">Measuring the longevity of a build</h2>

<p>If a specific build passes the reproducibility test then its longevity can be measured. Longevity is a measure of the period of time between the first time the build passes the reproducibility test and the last time it passes. All builds eventually fail because some dependency of the build process will fail (including the language itself - .NET Framework 3.5 was released in November  2007 but it is no longer available from Microsoft).</p>

<p align="center">
  <img width="600" height="400" src="/assets/images/fight_club.jpg" />
</p>

<p>Longevity is measured for a single build configuration. Namely, P<sub>0</sub> will have a certain longevity, but P<sub>1</sub>’s longevity may be shorter or longer depending on the changes made to its build configuration. Although true longevity can only be calculated after the build fails, developers can make conscious decisions to maximize the expected longevity of their code:</p>
<ul>
  <li>prefer dependencies that offer long term support (e.g. choose .NET 6 LTS even after .NET 7 is released) <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></li>
  <li>prefer dependencies that minimize the number of <a href="https://fsprojects.github.io/Paket/faq.html#What-does-transitive-dependencies-mean">transitive dependencies</a></li>
  <li>specify dependencies using <a href="https://fsprojects.github.io/Paket/nuget-dependencies.html#Pinned-version-constraint">pinned version constraints</a> <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li>
  <li>if using Docker, build from <a href="https://hub.docker.com/search?q=&amp;type=image&amp;image_filter=official">official base images</a></li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Reproducibility is relatively easy with modern software development tools. The crux of the problem is giving future developers the ability to:</p>
<ol>
  <li>easily recreate the initial development environment across multiple platforms/architectures</li>
  <li>continue to make changes to the code that does not break this process</li>
</ol>

<p>In the next few posts I will describe my approach to reproducibility and demonstrate how to apply them to an existing code base.</p>

<h4 id="footnotes">Footnotes</h4>

<!--

1. Intro
  - need for reproducibility
  - in science
  - in software
  - in machine learning

2. Basic tools
  - Docker (links to learning resources)
  - Gitlab/Github 
  - CI/CD
  - permissive licensing

3. Producing reporducible builds
  - choice of baseline (LTS)
  - provide multiple options (multiple-platforms)
    - local install w/ ci/cd
    - docker-compose local (build)
  - push build complexity to lowest level

4. CI/CD
  - Gitlab runner w/ docker
  - (optional) docker registry

5. Publishing
  - code should be publish to allow someone (most likely yourself) to reproduce it
  - but it shouldnt be required; also provide standalone executables

-->

<!--
https://www.nature.com/articles/s41562-016-0021


The problem
A hallmark of scientific creativity is the ability to see novel and unexpected patterns in data. John Snow's identification of links between cholera and water supply17, Paul Broca's work on language lateralization18 and Jocelyn Bell Burnell's discovery of pulsars19 are examples of breakthroughs achieved by interpreting observations in a new way. However, a major challenge for scientists is to be open to new and important insights while simultaneously avoiding being misled by our tendency to see structure in randomness. The combination of apophenia (the tendency to see patterns in random data), confirmation bias (the tendency to focus on evidence that is in line with our expectations or favoured explanation) and hindsight bias (the tendency to see an event as having been predictable only after it has occurred) can easily lead us to false conclusions20. Thomas Levenson documents the example of astronomers who became convinced they had seen the fictitious planet Vulcan because their contemporary theories predicted its existence21. Experimenter effects are an example of this kind of bias22.

Over-interpretation of noise is facilitated by the extent to which data analysis is rapid, flexible and automated23. In a high-dimensional dataset, there may be hundreds or thousands of reasonable alternative approaches to analysing the same data24,25. For example, in a systematic review of functional magnetic resonance imaging (fMRI) studies, Carp showed that there were almost as many unique analytical pipelines as there were studies26. If several thousand potential analytical pipelines can be applied to high-dimensional data, the generation of false-positive findings is highly likely. For example, applying almost 7,000 analytical pipelines to a single fMRI dataset resulted in over 90% of brain voxels showing significant activation in at least one analysis27.

During data analysis it can be difficult for researchers to recognize P-hacking28 or data dredging because confirmation and hindsight biases can encourage the acceptance of outcomes that fit expectations or desires as appropriate, and the rejection of outcomes that do not as the result of suboptimal designs or analyses. Hypotheses may emerge that fit the data and are then reported without indication or recognition of their post hoc origin7. This, unfortunately, is not scientific discovery, but self-deception29. Uncontrolled, it can dramatically increase the false discovery rate. We need measures to counter the natural tendency of enthusiastic scientists who are motivated by discovery to see patterns in noise.


-->
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Microsoft patches .NET LTS releases for 3 years while current releases are only patched for 18 months. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>While it may seem counterintuitive to limit the available versions of your dependencies, it improves control over the automatic dependency resolver. This is in line with the continuously reproducible mindset and future developers are always free to update the version if they encounter a conflict. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="reproducible" /><category term="net" /><summary type="html"><![CDATA[The next few posts take step back to examine the benefits of creating reproducible software. We will explore: the continuously reproducible mindset (this post) foundational tools for reproducibility (Exp 03) creating a continuously reproducible .NET project (Exp 04)]]></summary></entry><entry><title type="html">Experiment 01</title><link href="https://dlfelps.github.io/2022/06/06/DOTNET-Publishing-Options.html" rel="alternate" type="text/html" title="Experiment 01" /><published>2022-06-06T00:00:00+00:00</published><updated>2022-06-06T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/06/06/DOTNET-Publishing-Options</id><content type="html" xml:base="https://dlfelps.github.io/2022/06/06/DOTNET-Publishing-Options.html"><![CDATA[<p>This experiment explores various publishing options associated with .NET, including:</p>
<ul>
  <li>framework-dependent vs self-contained</li>
  <li>Windows vs Linux vs OSX</li>
  <li>and more…</li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>The traditional way to distribute a .NET application is by compiling code (e.g. C#) into bytecode known as <a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language">CIL</a>. This bytecode can then be run by anyone who has installed the .NET runtime environment (also known as <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr">CLR</a>). The process is illustrated below:</p>

<p align="center">
  <img width="416" height="480" src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/71/Overview_of_the_Common_Language_Infrastructure_2015.svg/416px-Overview_of_the_Common_Language_Infrastructure_2015.svg.png" />
</p>

<p>This compilation strategy is known as <a href="https://en.wikipedia.org/wiki/Dynamic_compilation">dynamic compilation</a> and was popularized by the Java Virtual Machine. Some languages like C++ use static compilers that produce native code for a specific platform directly. This code cannot be shared across platforms, but users also do not need to install a runtime environment.</p>

<p>Although the .NET runtime is simple to install, some users may still prefer a “standalone” executable that does not require this extra step. Since .NET 3.0 developers have been able to publish their code as “self-contained” - which means that it includes the runtime environment along with their compiled bytecode. The only real downside is that it creates executables that are larger than they would be otherwise.</p>

<p>This study explores the effect of publishing code as “self-contained” across various platforms and the extent to which the size can be reduced through advanced publishing options.</p>

<h2 id="setup">Setup</h2>

<p>I strive to make all of my experiments reproducible. Please follow the installation instructions below to configure your system to run the experiment.</p>

<ol>
  <li>Install <a href="https://dotnet.microsoft.com/en-us/download">.NET 6.0 SDK</a> (not the Runtime option)</li>
  <li>Obtain the <a href="https://github.com/dlfelps/WaveFunctionCollapse">WaveFunctionCollapse</a> repo; you can either:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/dlfelps/WaveFunctionCollapse.git
</code></pre></div>    </div>
    <p>or <a href="https://github.com/dlfelps/WaveFunctionCollapse/archive/refs/heads/master.zip">download</a> and unzip</p>
  </li>
  <li>Run the provided commands for each experiment (see below)</li>
</ol>

<h2 id="experiment">Experiment</h2>

<h3 id="framework-dependent-vs-self-contained">Framework-dependent vs self-contained</h3>

<p>The first part of the experiment compares two deployment modes. In the framework-dependent distribution mode only the application and third-party assemblies are included; it is assumed that users will have the .NET runtime installed on their system. In the self-contained distribution mode the .NET runtime and runtime libraries included as well.</p>

<p>Another difference between the two modes is that the framework-dependent mode produces a cross-platform binary, which means it can run on any platform. The self-contained option must be created for a specific platform (in this case we use win-x64 but any valid runtime in the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID Catalog</a> may be chosen).</p>

<p>To run this portion of the experiment execute the following commands within your WaveFunctionCollapse folder (I am using Powershell for Windows):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet publish -c "exp_1a_framework-dependent"
dotnet publish -c "exp_1a_self-contained" -r win-x64 --self-contained true
</code></pre></div></div>
<p>The published folders can be found at</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>..\WaveFunctionCollapse\bin\exp_1a_framework-dependent\net6.0\publish\
..\WaveFunctionCollapse\bin\exp_1a_self-contained\net6.0\win-x64\publish
</code></pre></div></div>
<p>Execution of the created application is different in each case. From the framework-dependent publish folder the entrypoint is the cross-platform binary using the dotnet command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet WaveFunctionCollapse.dll
</code></pre></div></div>
<p>From the self-contained publish folder the entrypoint is simply the platform-specific executable (Windows here):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./WaveFunctionCollapse.exe
</code></pre></div></div>
<p>We measure the size of the corresponding publish folders to compare the final size of the distributable application in each case.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: center">size (MB)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>framework-dependent (cross-platform)</td>
      <td style="text-align: center">1.53</td>
    </tr>
    <tr>
      <td>self-contained (win-x64 only)</td>
      <td style="text-align: center">68.7</td>
    </tr>
  </tbody>
</table>

<p>The difference does appear to be approximately the size of a binary installation of .NET 6.0 (for Windows is 68.1 MB). But 68 MB barely registers on a 500 GB hard drive. My bigger concern is that self-contained distributions limit the systems that can use it since they are platform specific. In the next experiment we look at platforms besides Windows. <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<h3 id="varying-the-platform-of-self-contained-releases">Varying the platform of self-contained releases</h3>

<p>In this part of the experiment we determine the extent to which the target platform changes the size of the publish folder. To run this portion of the experiment execute the following commands within your WaveFunctionCollapse folder:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet publish -c "exp_1b_linux"  -r linux-x64 --self-contained true
dotnet publish -c "exp_1b_osx_x64"  -r osx-x64 --self-contained true
dotnet publish -c "exp_1b_osx12_arm"  -r osx.12-arm64 --self-contained true
</code></pre></div></div>
<p>I measured the size of the corresponding publish folders and also included the results from the self-contained win-x64 from the previous section.</p>

<p><!-- Table generated using https://www.tablesgenerator.com/markdown_tables#  --></p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: center">size (MB)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>win-x64</td>
      <td style="text-align: center">68.7</td>
    </tr>
    <tr>
      <td>linux-x64</td>
      <td style="text-align: center">68.5</td>
    </tr>
    <tr>
      <td>osx-x64</td>
      <td style="text-align: center">68.5</td>
    </tr>
    <tr>
      <td>osx12-arm</td>
      <td style="text-align: center">75.0</td>
    </tr>
  </tbody>
</table>

<p>There is no significant difference between the sizes of these various platforms. They are all approximately the size of the original application code plus the size of the binary installation of .NET 6.0 for the corresponding platform.</p>

<h3 id="trimming">Trimming</h3>

<p>To finish out this experiment I wanted to explore one of the advanced publishing options that dotnet provides - trimming. When you enable trimming the compiler tries to reduce deployment size by including only the minimum  subset of the framework assemblies that are needed to run the application. The unused parts of the framework are trimmed from the packaged application. But there is a risk that the compiler miscalculates which parts are necessary during build time causing a failure at run time.</p>

<p>To run this portion of the experiment execute the following commands within your WaveFunctionCollapse folder:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet publish -c "exp_1c_windows"  -r win-x64 --self-contained true -p:PublishTrimmed=true
dotnet publish -c "exp_1c_linux"  -r linux-x64 --self-contained true -p:PublishTrimmed=true
dotnet publish -c "exp_1c_osx_x64"  -r osx-x64 --self-contained true -p:PublishTrimmed=true
dotnet publish -c "exp_1c_osx12_arm"  -r osx.12-arm64 --self-contained true -p:PublishTrimmed=true
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: center">original size (MB)</th>
      <th style="text-align: center">reduced size (MB)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>win-x64</td>
      <td style="text-align: center">68.7</td>
      <td style="text-align: center">22.1</td>
    </tr>
    <tr>
      <td>linux-x64</td>
      <td style="text-align: center">68.5</td>
      <td style="text-align: center">23.8</td>
    </tr>
    <tr>
      <td>osx-x64</td>
      <td style="text-align: center">68.5</td>
      <td style="text-align: center">22.7</td>
    </tr>
    <tr>
      <td>osx12-arm</td>
      <td style="text-align: center">75.0</td>
      <td style="text-align: center">21.9</td>
    </tr>
  </tbody>
</table>

<p>The results show that the reduced size is about one third of the original size. But the risk that the application <em>may</em> fail at runtime does not seem worth the memory savings for most applications. However in this case I was able to verify that the Windows and Linux distributions worked correctly (OSX was not tested).</p>

<h2 id="limitations-of-study">Limitations of study</h2>

<p>The results shown above represent an experiment for a single code base. You may get different results for your own code (especially when trimming). If you do repeat this study on a different code base I would appreciate it if you would share the results for comparison!</p>

<h2 id="conclusion">Conclusion</h2>

<p>.NET makes it amazingly simple to publish code that works on almost any device. In order to share your application with the widest audience I recommend publishing both the framework-dependent and (untrimmed) self-contained versions for all major platforms. I do not generally recommend trimming unless you are able to thoroughly test the created executables.</p>

<h3 id="references">References</h3>

<ol>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/core/deploying/">.NET application publishing overview</a></li>
  <li><a href="https://github.com/mxgmn/WaveFunctionCollapse">WaveFunctionCollapse</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Common_Language_Infrastructure">CLI</a></li>
</ol>

<h3 id="footnotes">Footnotes</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>By default the framework-dependent mode creates both a cross-platform binary and a platform-specific executable that targets the current platform. In my case the publish folder included a platform-specific file called WaveFunctionCollapse.exe (since I use Windows). This unnecessary  file was removed before the folder size was measured. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><summary type="html"><![CDATA[This experiment explores various publishing options associated with .NET, including: framework-dependent vs self-contained Windows vs Linux vs OSX and more…]]></summary></entry><entry><title type="html">Welcome to my blog!</title><link href="https://dlfelps.github.io/2022/06/04/My-First-Post.html" rel="alternate" type="text/html" title="Welcome to my blog!" /><published>2022-06-04T00:00:00+00:00</published><updated>2022-06-04T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/06/04/My-First-Post</id><content type="html" xml:base="https://dlfelps.github.io/2022/06/04/My-First-Post.html"><![CDATA[<p>My goal for this site is to document the “experiments” that I perform while exploring various computer science topics. I hope to include future posts on the following topics:</p>

<ul>
  <li>.NET</li>
  <li>domain driven design</li>
  <li>software architecture</li>
</ul>

<p>If you have any suggestions or comments please email me at <a href="mailto:dlfelps@gmail.com">dlfelps@gmail.com</a>.</p>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><summary type="html"><![CDATA[My goal for this site is to document the “experiments” that I perform while exploring various computer science topics. I hope to include future posts on the following topics:]]></summary></entry></feed>