<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://dlfelps.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dlfelps.github.io/" rel="alternate" type="text/html" /><updated>2024-04-20T22:12:56+00:00</updated><id>https://dlfelps.github.io/feed.xml</id><title type="html">.NET Experiments</title><subtitle>Bill Nye meets Bill Gates ;)</subtitle><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><entry><title type="html">Experiment 14</title><link href="https://dlfelps.github.io/2024/06/01/quantum-smalltalk5.html" rel="alternate" type="text/html" title="Experiment 14" /><published>2024-06-01T00:00:00+00:00</published><updated>2024-06-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2024/06/01/quantum-smalltalk5</id><content type="html" xml:base="https://dlfelps.github.io/2024/06/01/quantum-smalltalk5.html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Our final post in the Quantum Smalltalk series explores a thought experiment proposed by Avshalom Elitzur and Lev Vaidman to demonstrate an unusual quantum feature - interaction-free measurement.</p>

<h1 id="experiment-14">Experiment #14</h1>
<p>Elitzur and  Vaidman proposed the following thought experiment:</p>

<blockquote>
  <p>You are given 100 EV bombs. Due to a manufacturing problem that was caught too late, some of the triggers are defective. Your job is to try to salvage as many good bombs as possible.</p>
</blockquote>

<h2 id="what-is-an-ev-bomb">What is an EV Bomb?</h2>
<p>This experiment requires us to add a new piece of equipment to our workbench - the EV bomb. This bomb is special because it has a very sensitive trigger: a photon detector. Turn out the lights now because a single photon can cause this bomb to explode!</p>

<p>The following rules describe an EV bomb:</p>
<ol>
  <li>If the trigger is not defective, when a photon enters trigger tube the bomb explodes and you cannot salvage the bomb.</li>
  <li>If the trigger is defective, when a photon enters the trigger tube the bomb does not explode and the photon continues undisturbed out the trigger tube exit.</li>
  <li>The distance from the bomb to the rest of the equipment is sufficiently large to protect the equipment; only the bomb is destroyed if an explosion occurs.</li>
</ol>

<h2 id="attempt-1">Attempt #1</h2>
<p><img src="/assets/images/exp14.png" alt="Experiment #14" title="Experiment #14" /></p>

<p>Our first attempt to salvage the good EV bombs isn’t very clever. Let’s just shoot some photons at it and see what happens.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Count</th>
      <th style="text-align: center">Explosion</th>
      <th style="text-align: center">Photon detected at D1</th>
      <th style="text-align: center">Bombs salvaged</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">80</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">20</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>We tested all the bombs and determined with 100% accuracy which ones were defective and which ones were good. However, we failed to salvage any of the good bombs because they were blown up in the process. If it seems like this thought experiment has no solution, then you are likely restricting yourself to solutions that follow the principle of locality. (For extra details on locality see Appendix B &amp; C below.)</p>

<h2 id="attempt-2">Attempt #2</h2>
<p><img src="/assets/images/exp15.png" alt="Experiment #15" title="Experiment #15" /></p>

<p>Our second attempt should look familiar by now - the Mach-Zehnder setup. We place the bomb on the path between the first beamsplitter and the lower mirror and observe the following results:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Count</th>
      <th style="text-align: center">Explosion</th>
      <th style="text-align: center">Photon detected at D0</th>
      <th style="text-align: center">Photon detected at D1</th>
      <th style="text-align: center">Bombs salvaged</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">40</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">40</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">20</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">?</td>
    </tr>
  </tbody>
</table>

<p>Clearly we can’t salvage any of the 40 good bombs that blew up. But what about the remaining 60 that didn’t explode? Were they all defective? To answer this question, let’s look at our simulation output. We first observe what happens to photons that pass through a defective EV bomb:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon passes through defective EV Bomb placed on the lower path. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon bouncing off of a mirror. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon passing through a beam splitter. &gt;&gt; #(0.9999999999999996 0.0)
Photon finally detected with following probabilities: &gt;&gt; #(0.9999999999999996 0.0 )

</code></pre></div></div>

<p>Defective EV bombs act as if they aren’t there (just like Experiment #11) so there is a 100% chance that it will be detected at D0. Good EV bombs give a different result:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon detonates EV Bomb on the lower path with 50% probability. &gt;&gt; #(0.4999999999999999 0)
Photon bouncing off of a mirror. &gt;&gt; #(0.0 0.4999999999999999)
Photon passing through a beam splitter. &gt;&gt; #(0.2499999999999999 0.2499999999999999)
Photon finally detected with following probabilities: &gt;&gt; #(0.2499999999999999 0.2499999999999999)
</code></pre></div></div>

<p>From the simulation we see that half of the time the EV bomb detonates. Therefore, we can deduce that there were 80 good bombs (because we observed 40 detonating) and 20 bad bombs (the remainder). The output probability for the bombs that don’t detonate is 25% at D0 and 25% at D1. This means that the 20 bombs we observed at D1 are good! The other 40 bombs that didn’t detonate and that we observed at D0 have a 50% probability of being good, but we can’t tell which is which.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Count</th>
      <th style="text-align: center">Explosion</th>
      <th style="text-align: center">Photon detected at D0</th>
      <th style="text-align: center">Photon detected at D1</th>
      <th style="text-align: center">Bombs salvaged</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">40</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">40</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">20</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">20</td>
    </tr>
  </tbody>
</table>

<h2 id="attempt-3-optional">Attempt #3 (optional)</h2>

<p>It’s a shame that we were only able to recover 25% of the good bombs. We can achieve the theoretical limit of 50% (or 40 in our example) by using something called the <a href="https://en.wikipedia.org/wiki/Quantum_Zeno_effect?useskin=vector">Quantum Zeno Effect</a>. The details of how to extend our setup using this effect are left up to the reader. I recommend <a href="https://youtu.be/fus1nJ6JaTk?si=Y6ljo3NrULArOx5H&amp;t=375">this video</a>.</p>

<p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*bjGo9HLPhqvxcVbdZGnuOA.gif" alt="Quantum Zeno effect" />
<a href="https://medium.com/qiskit/building-quantum-bomb-testers-and-other-thought-experiments-with-quantum-computers-c160060fdde4">source</a></p>

<h1 id="interaction-free-measurement">Interaction-free measurement</h1>

<p>The EV bomb experiment demonstrates a non-local feature of quantum mechanics; we were able to learn something about a path that the photon didn’t take. Furthermore, we did so without any prior information. This is called an interaction-free measurement.</p>

<p>This is in contrast to, for example, the case where it is known that an object is located in one of two boxes. Looking and <em>not</em> finding it in one box tells us that the object is located inside the other box. This is also an interaction-free measurement, but it does not violate non-locality because we used prior information.</p>

<h1 id="summary">Summary</h1>
<p>Experiment #14 presented another weird quantum feature of interaction-free measurements. Although our treatment was theoretical, know that these results have been duplicated in the <a href="https://www.oeaw.ac.at/fileadmin/Institute/IQOQI-Vienna/PDF/publications-zeilinger/1994_-_Fundamental_Problems_in_Quantum_Theory_-_Experimental_Realization_of_Interaction-Free_Measurement.pdf">lab</a>.</p>

<h1 id="conclusion">Conclusion</h1>
<p>This post concludes the Quantum Smalltalk series. I am amazed at how much of the quantum world we were able to explore using the Mach-Zehnder setup. I hope that these posts piqued your interest in quantum mechanics. There are a lot of great resources available. As a next step, I recommend the book <a href="https://www.amazon.com/Through-Two-Doors-Once-Experiment/dp/1101986093">Through Two Doors at Once: The Elegant Experiment That Captures the Enigma of Our Quantum Reality</a> by Anil Ananthaswamy. Alternatively, if you find general relativity generally fascinating then you might want to explore more advanced topics like the <a href="https://en.wikipedia.org/wiki/Black_hole_information_paradox?useskin=vector">black hole information paradox</a>.</p>

<h1 id="appendix-a-the-smalltalk-code">Appendix A: The Smalltalk code</h1>
<p>The full Pharo package can be found at <a href="https://github.com/dlfelps/MZI">dlfeps/MZI</a>.</p>

<h1 id="appendix-b-einstein-and-locality">Appendix B: Einstein and locality</h1>
<p>The principle of locality states that for one point to have an effect one another point, something must travel between the points to cause the effect. The special theory of relativity limits the speed of travel to the speed of light. Therefore an event at point <strong>A</strong> cannot cause a result at point <strong>B</strong> in a time less than <strong>D/c</strong>, where <strong>D</strong> is the distance between the points and <strong>c</strong> is the speed of light in vacuum.</p>

<p>Einstein believed in locality. In one of his 1935 papers, Einstein (along with co-authors Podolsky and Rosen) describe a thought experiment that demonstrates a scenario where quantum mechanics violates locality and concluded that quantum theory does not provide a complete description of reality. The paper ends by saying:</p>

<blockquote>
  <p>“While we have thus shown that the wave function does not provide a complete description of the physical reality, we left open the question of whether or not such a description exists. We believe, however, that such a theory is possible.”</p>
</blockquote>

<p>Einstein believed that the solution to the paradox lay in introducing additional (possibly inaccessible) variables. Such a theory is known as a hidden variable theory.</p>

<h1 id="appendix-c-bell-and-locality">Appendix C: Bell and locality</h1>
<p>Almost 30 years after Einstein’s paper, John Stewart Bell proposed a theory that states that no theory of hidden local variables can ever reproduce all the predictions of quantum mechanics. To date, all such experiments have supported the theory of quantum physics and not the hypothesis of local hidden variables. The 2022 Nobel Prize in Physics was awarded to three scientists (John Clauser, Alain Aspect, and Anton Zeilinger) for their efforts to experimentally validate violations of the Bell inequalities. Bell’s test proves that quantum mechanics is either non-local itself or has non-local hidden variables.</p>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="quantum" /><category term="smalltalk" /><summary type="html"><![CDATA[Introduction Our final post in the Quantum Smalltalk series explores a thought experiment proposed by Avshalom Elitzur and Lev Vaidman to demonstrate an unusual quantum feature - interaction-free measurement.]]></summary></entry><entry><title type="html">Experiment 13</title><link href="https://dlfelps.github.io/2024/05/01/quantum-smalltalk4.html" rel="alternate" type="text/html" title="Experiment 13" /><published>2024-05-01T00:00:00+00:00</published><updated>2024-05-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2024/05/01/quantum-smalltalk4</id><content type="html" xml:base="https://dlfelps.github.io/2024/05/01/quantum-smalltalk4.html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In Experiments #10 and #12 we observed photons acting like particles. In Experiment #11 a photon’s actions could only be explained using wave-like behavior. In 1978, John Wheeler proposed an experiment to test the limits this paradox. He designed the experiment to answer the following questions:</p>
<ul>
  <li>Does the photon decide to travel as a wave or a particle depending on the experimental setup?</li>
  <li>And if yes, when does the photon decide?</li>
</ul>

<h1 id="experiment-13">Experiment #13</h1>
<p><img src="/assets/images/exp4.gif" alt="Experiment #13" title="Experiment #13" /></p>

<p>Combine the setups from Experiment #11 and #12 by randomly inserting the second beamsplitter AFTER the photon has interacted with the first beam splitter. This allows the photon to take one of six paths:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">State name</th>
      <th style="text-align: center">Path at BS1</th>
      <th style="text-align: center">BS2 present</th>
      <th style="text-align: center">Path at BS2</th>
      <th style="text-align: center">Detector</th>
      <th style="text-align: center">Probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">RX</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">TX</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">RR</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">RT</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">TR</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">TT</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">?</td>
    </tr>
  </tbody>
</table>

<p>We have seen both of the setups independently, but now the decision to add the second beamsplitter takes place during the experiment.</p>

<h2 id="results">Results</h2>

<p>Let’s examine two of the Smalltalk simulation runs. In the first example, the second beamsplitter was omitted from the setup.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Second beamsplitter omitted from setup. 
Photon bouncing off of a mirror. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon finally detected with following probabilities: &gt;&gt; #(0.4999999999999999 0.4999999999999999)

</code></pre></div></div>
<p>We observe detection probabilities similar to those in Experiment #12. In the next example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Second beamsplitter inserted into setup after mirror. 
Photon bouncing off of a mirror. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon passing through a beam splitter. &gt;&gt; #(0.9999999999999996 0.0 )
Photon finally detected with following probabilities: &gt;&gt; #(0.9999999999999996 0.0)
</code></pre></div></div>

<p>We observe detection probabilities similar to those in Experiment #11. Filling in the results chart we notice that the table reads as if there were two different experiments going on (i.e. the total observation probability adds up to 2.0!)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">State name</th>
      <th style="text-align: center">Path at BS1</th>
      <th style="text-align: center">BS2 present</th>
      <th style="text-align: center">Path at BS2</th>
      <th style="text-align: center">Detector</th>
      <th style="text-align: center">Probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">RX</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">0.50</td>
    </tr>
    <tr>
      <td style="text-align: center">TX</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">0.50</td>
    </tr>
    <tr>
      <td style="text-align: center">RR/TT</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">0.0</td>
    </tr>
    <tr>
      <td style="text-align: center">RT/TR</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">1.0</td>
    </tr>
  </tbody>
</table>

<p>This is because there are two experiments happening - as soon as you insert the second beamsplitter you change the experiment.</p>

<h1 id="interpretation">Interpretation</h1>
<p>It is clear that the behavior of the photon in the interferometer depends on the choice of second beamsplitter, even when that choice is made after the photon enters the interferometer. In Wheeler’s words,</p>

<blockquote>
  <p>“we have a strange inversion of the normal order of time. We, now, by moving the mirror in or out have an unavoidable effect on what we have a right to say about the already past history of that photon”</p>
</blockquote>

<p>It may be tempting to interpret this experiment as a case of <a href="https://en.wikipedia.org/wiki/Retrocausality">retrocausality</a>, whereby the insertion of the second beamsplitter causes the photon to retroactively act like a wave instead of a particle. However, this is a leap too far.</p>

<p>Experiment #13, also known as the <a href="https://en.wikipedia.org/wiki/Wheeler%27s_delayed-choice_experiment">delayed-choice experiment</a>, demonstrates a  subtle point of <a href="https://en.wikipedia.org/w/index.php?title=Wave%E2%80%93particle_duality">wave-particle duality</a> - a photon’s behavior is <em>always</em> governed by the Schrödinger equation, yet when measured, it is observed as a particle whose location is determined by the <a href="https://en.wikipedia.org/wiki/Born_rule">Born rule</a>.</p>

<p>This is what is meant by a photon acting like a <em>wave</em> and a <em>particle</em>. But what about Experiments #10 and #12, where the photon acted only like a particle and not like a wave? WRONG. The photon was both, but the wavefunction predicted behavior that did not have any interference (i.e. it is particle-like).</p>

<h1 id="summary">Summary</h1>
<p>Experiment #13 presented John Wheeler’s <a href="https://en.wikipedia.org/wiki/Wheeler%27s_delayed-choice_experiment">delayed-choice experiment</a>. An interesting variation of this experiment is called the <a href="https://en.wikipedia.org/wiki/Delayed-choice_quantum_eraser">delayed-choice quantum eraser</a>.</p>

<h1 id="appendix-the-smalltalk-code">Appendix: The Smalltalk code</h1>
<p>The full Pharo package can be found at <a href="https://github.com/dlfelps/MZI">dlfeps/MZI</a>.</p>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="quantum" /><category term="smalltalk" /><summary type="html"><![CDATA[Introduction In Experiments #10 and #12 we observed photons acting like particles. In Experiment #11 a photon’s actions could only be explained using wave-like behavior. In 1978, John Wheeler proposed an experiment to test the limits this paradox. He designed the experiment to answer the following questions: Does the photon decide to travel as a wave or a particle depending on the experimental setup? And if yes, when does the photon decide?]]></summary></entry><entry><title type="html">Experiment 12</title><link href="https://dlfelps.github.io/2024/04/01/quantum-smalltalk3.html" rel="alternate" type="text/html" title="Experiment 12" /><published>2024-04-01T00:00:00+00:00</published><updated>2024-04-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2024/04/01/quantum-smalltalk3</id><content type="html" xml:base="https://dlfelps.github.io/2024/04/01/quantum-smalltalk3.html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Experiment #12 doesn’t introduce any new concepts, but it prepares us for a surprising result in Experiment #13.</p>

<h1 id="experiment-12">Experiment #12</h1>
<p><img src="/assets/images/exp3.png" alt="Experiment #12" title="Experiment #12" /></p>

<p>Modify the setup from Experiment #11 by removing the second beamsplitter. This allows the photon to take one of two paths:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">State name</th>
      <th style="text-align: center">Path at BS1</th>
      <th style="text-align: center">Detector</th>
      <th style="text-align: center">Probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">R</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">T</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">?</td>
    </tr>
  </tbody>
</table>

<p>We don’t yet know the outcome of the experiment, but based on our observations from Experiment 10 we might expect an equal distribution between D0 and D1. Let’s run the Smalltalk simulation.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon bouncing off of a mirror. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon finally detected with following probabilities: &gt;&gt; #(0.4999999999999999 0.4999999999999999)
</code></pre></div></div>

<p>Our intuition was correct! After the first beamsplitter the photon is equally likely to be on the upper and lower path, but this time the paths are not recombined using the second beamsplitter. So any photons that are reflected at BS1 end up at D0 and any photons that are transmitted at BS1 end up at D1. We always know which path the photon took.</p>

<h2 id="the-wavefunction">The wavefunction</h2>

<p>How does this affect the photon’s wavefunction? Initially, after interacting with the beamsplitter we do not know which path the photon is on. Therefore its wavefunction is a superposition of states of the upper and lower paths.  At the moment just before the photon would reach D0 or D1, its wavefunction predicts with 50% probability that the photon will be detected at D0 and 50% probability that the photon will be detected at D1. An instant later it is detected at either D0 or D1. But how does the wavefunction predict two equally likely locations in one instant and then the next instant, the probabilities are gone and the photon is detected at D0 or D1?</p>

<h2 id="measurement-of-a-quantum-system">Measurement of a quantum system</h2>

<p>When scientists say they are taking a “measurement” they are describing the action or process of observing something in order to gain information. But in quantum mechanics, the term “measurement” has both practical and philosophical implications. From a practical point of view, measuring a quantum system changes the quantum state that describes that system; this is sometimes described as causing the wavefunction to collapse (i.e. it is no longer in a superposition of states). From a philosophical point of view, how did the system know it was being measured? In other words, what caused the collapse? How are the probabilities converted into an actual, well-defined classical outcome? The answer to these questions depends on your interpretation of quantum mechanics and is beyond the scope of this post. For those interested, I thoroughly enjoyed listening to this <a href="https://youtu.be/GdqC2bVLesQ?si=yhlTgSpCbw2Gfv74">panel discussion</a> on the topic.</p>

<h1 id="summary">Summary</h1>
<p>Experiment 12 explored the measurement problem - the instant that the photon becomes a particle (as described by the wavefunction). The next experiment challenges our everyday understanding of reality.</p>

<h1 id="appendix-the-smalltalk-code">Appendix: The Smalltalk code</h1>
<p>The full Pharo package can be found at <a href="https://github.com/dlfelps/MZI">dlfeps/MZI</a>.</p>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="quantum" /><category term="smalltalk" /><summary type="html"><![CDATA[Introduction Experiment #12 doesn’t introduce any new concepts, but it prepares us for a surprising result in Experiment #13.]]></summary></entry><entry><title type="html">Experiment 11</title><link href="https://dlfelps.github.io/2024/03/01/quantum-smalltalk2.html" rel="alternate" type="text/html" title="Experiment 11" /><published>2024-03-01T00:00:00+00:00</published><updated>2024-03-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2024/03/01/quantum-smalltalk2</id><content type="html" xml:base="https://dlfelps.github.io/2024/03/01/quantum-smalltalk2.html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Experiment 11 introduces the concepts of quantum superposition by making a slight modification to Experiment 10.</p>

<h1 id="experiment-11">Experiment #11</h1>
<p><img src="/assets/images/exp2.PNG" alt="Experiment #11" title="Experiment #11" /></p>

<p>Modify the setup from Experiment #10 by removing the block on the lower path. This allows the photon to now take one of four paths:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">State name</th>
      <th style="text-align: center">Path at BS1</th>
      <th style="text-align: center">Path at BS2</th>
      <th style="text-align: center">Detector</th>
      <th style="text-align: center">Probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">RR</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">RT</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">TR</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">Reflected</td>
      <td style="text-align: center">D0</td>
      <td style="text-align: center">?</td>
    </tr>
    <tr>
      <td style="text-align: center">TT</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">Transmitted</td>
      <td style="text-align: center">D1</td>
      <td style="text-align: center">?</td>
    </tr>
  </tbody>
</table>

<p>We don’t yet know the outcome of the experiment, but based on our observations from Experiment 10 we might expect an equal distribution between D0 and D1. However, that is not what we observe. Let’s run the Smalltalk simulation.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon bouncing off of a mirror. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon passing through a beam splitter. &gt;&gt; #(0.9999999999999996 0.0)
Photon finally detected with following probabilities: &gt;&gt; #(0.9999999999999996 0.0)
</code></pre></div></div>

<p>After the first beamsplitter the photon is equally likely to be on the upper and lower path (i.e. 50/50) - the same as in Experiment 10. But this time the lower path is not blocked and the second beam splitter sends all of the photons to D0. How is this possible?</p>

<h2 id="what-is-superposition">WHAT is Superposition</h2>

<p>Quantum mechanics explains this phenomenon by saying that the wavefunction of the photon was in a superposition of two states (i.e. one state going through the upper path and one state going through the lower path). NOTE: this is different that saying that it went through both paths or neither path.</p>

<p>The experiment was designed in such a way that the wavefunction for state RR lags behind state TT by half a wavelength, resulting in destructive interference. The probability amplitude goes to zero and there are no photons at D1. States described by RT and TR arrive with their waves in sync, resulting in constructive interference. The probability amplitude doubles and all the light reaches D0.</p>

<p>The photon itself doesn’t split because it can’t. The wavefunction of the photon captures the fact that the photon could be in two equally likely states (lower path and upper path). Then using this wavefunction you can calculate the probability that the photon is detected at D0 and D1 and you get:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Photon outcome</th>
      <th style="text-align: center">probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Detected at D0</td>
      <td style="text-align: center">1.0</td>
    </tr>
    <tr>
      <td style="text-align: center">Detected at D1</td>
      <td style="text-align: center">0</td>
    </tr>
  </tbody>
</table>

<p>But importantly, we cannot say whether the photon was in state TR (upper path) or RT (lower path) only that it was detected at D0. This is an example of particle-wave duality - the photon’s wavefunction acts like a wave (destructive and constructive interference), but is ultimately measured as a single photon.</p>

<h2 id="why-is-superposition">WHY is Superposition</h2>

<p>No one knows for sure and those that think they do can’t agree.</p>

<h2 id="when-is-superposition">WHEN is Superposition</h2>

<p>Although we don’t know why it happens, we can describe the conditions when we observe it. In this case, it happened because the observers (e.g. you, me, or the universe) couldn’t tell which path the photon took. Each path was sufficiently ambiguous to allow the photon’s wavefunction to remain in superposition. In Experiment 10, when we blocked the lower path, the photon couldn’t be in superposition because we knew it must have taken the upper path to arrive at the detectors.</p>

<h1 id="summary">Summary</h1>
<p>Experiment 11 explored the wave-like nature of a photon demonstrated by the destructive interference that occurs between the two superposition states of the system. The next experiment explores what happens when we remove the second beam splitter.</p>

<h1 id="appendix-the-smalltalk-code">Appendix: The Smalltalk code</h1>
<p>The full Pharo package can be found at <a href="https://github.com/dlfelps/MZI">dlfeps/MZI</a>.</p>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="quantum" /><category term="smalltalk" /><summary type="html"><![CDATA[Introduction Experiment 11 introduces the concepts of quantum superposition by making a slight modification to Experiment 10.]]></summary></entry><entry><title type="html">Experiment 10</title><link href="https://dlfelps.github.io/2024/02/01/quantum-smalltalk1.html" rel="alternate" type="text/html" title="Experiment 10" /><published>2024-02-01T00:00:00+00:00</published><updated>2024-02-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2024/02/01/quantum-smalltalk1</id><content type="html" xml:base="https://dlfelps.github.io/2024/02/01/quantum-smalltalk1.html"><![CDATA[<h1 id="introducing-the-quantum-smalltalk-series">Introducing the Quantum Smalltalk series</h1>
<p>In this series I am going to introduce you to some of my favorite quantum experiments while modeling those experiments in <a href="https://pharo.org/">Pharo Smalltalk</a>. We will explore the quantum properties of superposition and entanglement. Our experimental model is rather simple - the optical devices typically used in such experiments (i.e. beam splitters, polarizers, mirrors) will be modeled using complex-valued linear transformations. Although the results of matrix multiplication may not surprise you, I hope that the results of these experiments will. I could have called this the “Complex-valued matrix multiplication with Smalltalk series,” but that doesn’t have quite the same ring.</p>

<h2 id="why-smalltalk">Why Smalltalk?</h2>
<p>I chose Smalltalk for this series because it allows me to quickly implement an internal (or embedded) domain specific language (DSL) to describe the quantum experiments. You will become more familiar with the DSL as we progress, but here is a sample:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Photon new
	beamSplitter;
	blockLowerPath;
	mirror;
	beamSplitter;
	detector.
</code></pre></div></div>
<p>A good DSL simplifies the code to allow you to focus on the concepts rather than the syntax. A great DSL is self-explanatory, allowing a domain expert (in this case a physicist) to use it without any previous programming experience. I don’t know any physicists so this is at least a good DSL.</p>

<h2 id="the-mach-zehnder-setup">The Mach-Zehnder setup</h2>
<p>All of the experiments in this series will be variations of the <a href="https://en.wikipedia.org/wiki/Mach%E2%80%93Zehnder_interferometer">Mach-Zehnder interferometer</a>. It was originally proposed in 1891 to measure phase shifts between the two paths caused by a sample, but it has since been adapted to study a variety of quantum effects. Why aren’t we using the double-slit experiment? It may be the most iconic quantum experiment, but it is also difficult to model because it requires differential equations. We can demonstrate multiple quantum properties (i.e. superposition and entanglement) using the much simpler Mach-Zehnder setup.</p>

<blockquote>
  <p>Feynman once claimed that any question in quantum mechanics could be answered using the double-slit experiment. (But of course he said it as only he could, “You remember the experiment with the two holes? It’s the same thing.”)</p>
</blockquote>

<p>The purpose of the first experiment is to familiarize yourself with the:</p>
<ul>
  <li>experimental setup and optical components used</li>
  <li>modeling approach (i.e. matrix multiplication)</li>
  <li>Smalltalk DSL describing the experimental setup</li>
</ul>

<h3 id="basic-optical-components">Basic optical components</h3>
<p>This section describes the optical components used in the first 2 experiments. Each component is described in common language as well as its equivalent mathematical  transformation. Credit: All of the diagrams and mathematical notation used in this series follows from <a href="https://ocw.mit.edu/courses/8-04-quantum-physics-i-spring-2016">MIT’s Quantum Physics 1</a>; this is an excellent course taught by Dr. Barton Zwiebach.</p>

<h3 id="photon-emitter">Photon Emitter</h3>
<p>Luckily for us, all of the components have rather descriptive names. In this experiment, we will not be using a coherent laser as the source, but instead a single photon will traverse the optical path (or paths) of the experiment. When a photon is emitted on the upper beam it is represented by the following probability amplitudes:</p>

<math xmlns="http://www.w3.org/1998/Math/MathML" data-latex="lower_{path}=\begin{bmatrix}0\\1\end{bmatrix}, upper_{path}=\begin{bmatrix}1\\0\end{bmatrix}" display="block">
  <mrow>
    <mrow>
      <mi data-latex="l">l</mi>
      <mo>&#x2062;</mo>
      <mi data-latex="o">o</mi>
      <mo>&#x2062;</mo>
      <mi data-latex="w">w</mi>
      <mo>&#x2062;</mo>
      <mi data-latex="e">e</mi>
      <mo>&#x2062;</mo>
      <msub data-latex="r_{p a t h}">
        <mi data-latex="r">r</mi>
        <mrow data-mjx-texclass="ORD" data-latex="{p a t h}">
          <mi data-latex="p">p</mi>
          <mo>&#x2062;</mo>
          <mi data-latex="a">a</mi>
          <mo>&#x2062;</mo>
          <mi data-latex="t">t</mi>
          <mo>&#x2062;</mo>
          <mi data-latex="h">h</mi>
        </mrow>
      </msub>
    </mrow>
    <mo data-latex="=">=</mo>
    <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
      <mo data-mjx-texclass="OPEN">[</mo>
      <mtable columnspacing="1em" rowspacing="4pt">
        <mtr>
          <mtd>
            <mn data-latex="0">0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn data-latex="1">1</mn>
          </mtd>
        </mtr>
      </mtable>
      <mo data-mjx-texclass="CLOSE">]</mo>
    </mrow>
  </mrow>
  <mo data-latex=",">,</mo>
  <mrow>
    <mrow>
      <mi data-latex="u">u</mi>
      <mo>&#x2062;</mo>
      <mi data-latex="p">p</mi>
      <mo>&#x2062;</mo>
      <mi data-latex="p">p</mi>
      <mo>&#x2062;</mo>
      <mi data-latex="e">e</mi>
      <mo>&#x2062;</mo>
      <msub data-latex="r_{p a t h}">
        <mi data-latex="r">r</mi>
        <mrow data-mjx-texclass="ORD" data-latex="{p a t h}">
          <mi data-latex="p">p</mi>
          <mo>&#x2062;</mo>
          <mi data-latex="a">a</mi>
          <mo>&#x2062;</mo>
          <mi data-latex="t">t</mi>
          <mo>&#x2062;</mo>
          <mi data-latex="h">h</mi>
        </mrow>
      </msub>
    </mrow>
    <mo data-latex="=">=</mo>
    <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
      <mo data-mjx-texclass="OPEN">[</mo>
      <mtable columnspacing="1em" rowspacing="4pt">
        <mtr>
          <mtd>
            <mn data-latex="1">1</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn data-latex="0">0</mn>
          </mtd>
        </mtr>
      </mtable>
      <mo data-mjx-texclass="CLOSE">]</mo>
    </mrow>
  </mrow>
</math>

<h3 id="beamsplitter">Beamsplitter</h3>
<p><img src="/assets/images/beamSplitter.PNG" alt="Beamsplitter" title="Beamsplitter" /></p>

<p>If you shine a laser at a balanced beam splitter (the only kind we model here) then exactly 50% of the light is transmitted and the remaining 50% is reflected (also undergoing a phase shift of PI). What happens if you send a single photon instead of a laser? Hopefully you will be able to answer that after the second experiment, but for now assume that there is a 50% chance that it gets reflected and a 50% chance that it gets transmitted. This is represented mathematically by:</p>

<math xmlns="http://www.w3.org/1998/Math/MathML" data-latex="\frac{1}{\sqrt{2}}\begin{bmatrix}1 &amp; i\\i &amp; 1\end{bmatrix}" display="block">
  <mfrac data-latex="\frac{1}{\sqrt{2}}">
    <mn data-latex="1">1</mn>
    <msqrt data-latex="\sqrt{2}">
      <mn data-latex="2">2</mn>
    </msqrt>
  </mfrac>
  <mo>&#x2062;</mo>
  <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
    <mo data-mjx-texclass="OPEN">[</mo>
    <mtable columnspacing="1em" rowspacing="4pt">
      <mtr>
        <mtd>
          <mn data-latex="1">1</mn>
        </mtd>
        <mtd>
          <mi data-latex="i">i</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi data-latex="i">i</mi>
        </mtd>
        <mtd>
          <mn data-latex="1">1</mn>
        </mtd>
      </mtr>
    </mtable>
    <mo data-mjx-texclass="CLOSE">]</mo>
  </mrow>
</math>

<blockquote>
  <h3 id="an-aside-on-probabilities">An aside on probabilities</h3>
  <p>The careful reader will notice that the result of a photon passing through a beamsplitter yields 1/sqrt(2) instead of 1/2. That is because this number represents a <strong>probability amplitude</strong>.</p>
</blockquote>

<math xmlns="http://www.w3.org/1998/Math/MathML" data-latex="\frac{1}{\sqrt{2}}\begin{bmatrix}1 &amp; i\\i &amp; 1\end{bmatrix}\begin{bmatrix}0\\1\end{bmatrix}=\begin{bmatrix}0+\sqrt{2}i\\\sqrt{2}+0i\end{bmatrix}" display="block">
  <mrow>
    <mfrac data-latex="\frac{1}{\sqrt{2}}">
      <mn data-latex="1">1</mn>
      <msqrt data-latex="\sqrt{2}">
        <mn data-latex="2">2</mn>
      </msqrt>
    </mfrac>
    <mo>&#x2062;</mo>
    <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
      <mo data-mjx-texclass="OPEN">[</mo>
      <mtable columnspacing="1em" rowspacing="4pt">
        <mtr>
          <mtd>
            <mn data-latex="1">1</mn>
          </mtd>
          <mtd>
            <mi data-latex="i">i</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi data-latex="i">i</mi>
          </mtd>
          <mtd>
            <mn data-latex="1">1</mn>
          </mtd>
        </mtr>
      </mtable>
      <mo data-mjx-texclass="CLOSE">]</mo>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
      <mo data-mjx-texclass="OPEN">[</mo>
      <mtable columnspacing="1em" rowspacing="4pt">
        <mtr>
          <mtd>
            <mn data-latex="0">0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn data-latex="1">1</mn>
          </mtd>
        </mtr>
      </mtable>
      <mo data-mjx-texclass="CLOSE">]</mo>
    </mrow>
  </mrow>
  <mo data-latex="=">=</mo>
  <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
    <mo data-mjx-texclass="OPEN">[</mo>
    <mtable columnspacing="1em" rowspacing="4pt">
      <mtr>
        <mtd>
          <mrow>
            <mn data-latex="0">0</mn>
            <mo data-latex="+">+</mo>
            <mrow>
              <msqrt data-latex="\sqrt{2}">
                <mn data-latex="2">2</mn>
              </msqrt>
              <mo>&#x2062;</mo>
              <mi data-latex="i">i</mi>
            </mrow>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <msqrt data-latex="\sqrt{2}">
              <mn data-latex="2">2</mn>
            </msqrt>
            <mo data-latex="+">+</mo>
            <mrow>
              <mn data-latex="0">0</mn>
              <mo>&#x2062;</mo>
              <mi data-latex="i">i</mi>
            </mrow>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
    <mo data-mjx-texclass="CLOSE">]</mo>
  </mrow>
</math>

<blockquote>
  <p>You can convert a probability amplitude to a probability by taking its magnitude and squaring it.</p>
</blockquote>

<math xmlns="http://www.w3.org/1998/Math/MathML" data-latex="\lvert0+\sqrt{2}i\rvert^2=0.5" display="block">
  <msup data-latex="\rvert^2">
    <mrow>
      <mo data-mjx-texclass="OPEN" fence="false" stretchy="false" data-latex="\lvert">|</mo>
      <mrow>
        <mn data-latex="0">0</mn>
        <mo data-latex="+">+</mo>
        <mrow>
          <msqrt data-latex="\sqrt{2}">
            <mn data-latex="2">2</mn>
          </msqrt>
          <mo>&#x2062;</mo>
          <mi data-latex="i">i</mi>
        </mrow>
      </mrow>
      <mo data-mjx-texclass="CLOSE" fence="false" stretchy="false" data-latex="\rvert">|</mo>
    </mrow>
    <mn data-latex="2">2</mn>
  </msup>
  <mo data-latex="=">=</mo>
  <mn data-latex=".5">0.5</mn>
</math>

<h3 id="mirror">Mirror</h3>
<p><img src="/assets/images/mirror.PNG" alt="Mirror" title="Mirror" /></p>

<p>A mirror reflects an incoming photon while undergoing a phase shift of <em>pi</em>.</p>

<math xmlns="http://www.w3.org/1998/Math/MathML" data-latex="\begin{bmatrix}0 &amp; 1\\1 &amp; 0\end{bmatrix}" display="block">
  <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="\begin{bmatrix}0 &amp; 1\\1 &amp; 0\end{bmatrix}">
    <mo data-mjx-texclass="OPEN">[</mo>
    <mtable columnspacing="1em" rowspacing="4pt">
      <mtr>
        <mtd>
          <mn data-latex="0">0</mn>
        </mtd>
        <mtd>
          <mn data-latex="1">1</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn data-latex="1">1</mn>
        </mtd>
        <mtd>
          <mn data-latex="0">0</mn>
        </mtd>
      </mtr>
    </mtable>
    <mo data-mjx-texclass="CLOSE">]</mo>
  </mrow>
</math>

<h3 id="block">Block</h3>

<p><img src="/assets/images/blockLower.PNG" alt="Block" title="Block" /></p>

<p>A block absorbs an incoming photon, preventing it from reaching any downstream components. In the diagram above, the beamsplitter produces a 50% chance that the photon is absorbed by the block and a 50% chance that the photon is allowed to continue on the upper path.</p>

<math xmlns="http://www.w3.org/1998/Math/MathML" data-latex="block_{lower}=\begin{bmatrix}1 &amp; 0\\0 &amp; 0\end{bmatrix}" display="block">
  <mrow>
    <mi data-latex="b">b</mi>
    <mo>&#x2062;</mo>
    <mi data-latex="l">l</mi>
    <mo>&#x2062;</mo>
    <mi data-latex="o">o</mi>
    <mo>&#x2062;</mo>
    <mi data-latex="c">c</mi>
    <mo>&#x2062;</mo>
    <msub data-latex="k_{l o w e r}">
      <mi data-latex="k">k</mi>
      <mrow data-mjx-texclass="ORD" data-latex="{l o w e r}">
        <mi data-latex="l">l</mi>
        <mo>&#x2062;</mo>
        <mi data-latex="o">o</mi>
        <mo>&#x2062;</mo>
        <mi data-latex="w">w</mi>
        <mo>&#x2062;</mo>
        <mi data-latex="e">e</mi>
        <mo>&#x2062;</mo>
        <mi data-latex="r">r</mi>
      </mrow>
    </msub>
  </mrow>
  <mo data-latex="=">=</mo>
  <mrow data-mjx-texclass="INNER" data-latex-item="{bmatrix}" data-latex="{bmatrix}">
    <mo data-mjx-texclass="OPEN">[</mo>
    <mtable columnspacing="1em" rowspacing="4pt">
      <mtr>
        <mtd>
          <mn data-latex="1">1</mn>
        </mtd>
        <mtd>
          <mn data-latex="0">0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn data-latex="0">0</mn>
        </mtd>
        <mtd>
          <mn data-latex="0">0</mn>
        </mtd>
      </mtr>
    </mtable>
    <mo data-mjx-texclass="CLOSE">]</mo>
  </mrow>
</math>

<h3 id="photon-detector">Photon Detector</h3>
<p>This component detects a single photon. Most of the experimental setups used in this series will involve 2 detectors: D0 measuring the upper path and D1 measuring the lower path. Just as the emitter emits a real photon, the detector detects a real photon (i.e. it does not measure probability amplitudes or probabilities). The mathematical equivalent of the photon detector would be to sample the probabilities of all possible end-states of the photon (they should add up to 1). We will forgo this step and instead just report the associated probabilities.</p>

<h2 id="experiment-10">Experiment #10</h2>

<p><img src="/assets/images/exp1.PNG" alt="Experiment #10" title="Experiment #10" /></p>

<p>This experiment is relatively straightforward - its result is intuitive and agrees with a more classical interpretation. The setup includes:</p>
<ul>
  <li>1 photon emitter</li>
  <li>1 block</li>
  <li>2 beam-splitters</li>
  <li>2 mirrors</li>
  <li>2 detectors</li>
</ul>

<p>Before we do the math, let’s guess what might happen if we run this experiment 100 times. If the beamsplitters act like a random coin (heads the photon transmits, tails it reflects) then one might expect the following outcome:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Photon outcome</th>
      <th style="text-align: center">counts</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Detected at D0</td>
      <td style="text-align: center">25</td>
    </tr>
    <tr>
      <td style="text-align: center">Detected at D1</td>
      <td style="text-align: center">25</td>
    </tr>
    <tr>
      <td style="text-align: center">Absorbed by block</td>
      <td style="text-align: center">50</td>
    </tr>
  </tbody>
</table>

<p>Next let’s run the experiment and see if the calculated probabilities agree with our intuition (I’ll defer the Smalltalk code for now and just show the output report).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emitting a photon from lower path. &gt;&gt; #(0 1)
Photon passing through a beam splitter. &gt;&gt; #(0.4999999999999999 0.4999999999999999)
Photon's path blocked on lower path. &gt;&gt; #(0.4999999999999999 0)
Photon bouncing off of a mirror. &gt;&gt; #(0.0 0.4999999999999999)
Photon passing through a beam splitter. &gt;&gt; #(0.2499999999999999 0.2499999999999999)
Photon finally detected with following probabilities: &gt;&gt; #(0.2499999999999999 0.2499999999999999)
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Photon outcome</th>
      <th style="text-align: center">probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Detected at D0</td>
      <td style="text-align: center">0.25</td>
    </tr>
    <tr>
      <td style="text-align: center">Detected at D1</td>
      <td style="text-align: center">0.25</td>
    </tr>
    <tr>
      <td style="text-align: center">Absorbed by block</td>
      <td style="text-align: center">0.50</td>
    </tr>
  </tbody>
</table>

<p>The computed probabilities agree with our intuition!</p>

<h2 id="summary">Summary</h2>
<p>Experiment 10 laid the groundwork for the quantum properties we want to explore in the rest of the series. It introduced  the optical components and how they are modeled mathematically. However, I have not yet shown the Smalltalk code because it is not as important as the rest. If you want to better understand how to compute the probability amplitudes at an arbitrary point in the path then I would encourage you to consider watching the first few lectures of <a href="https://ocw.mit.edu/courses/8-04-quantum-physics-i-spring-2016">MIT’s Quantum Physics 1</a>.</p>

<h2 id="appendix-the-smalltalk-code">Appendix: The Smalltalk code</h2>
<p>I was surprised at how simple the Smalltalk DSL code turned out to be. It’s almost anti-climactic at this point, but the code almost line-by-line describes the order of the components in the experiment. Please keep in mind that the mathematical complexity lies beneath this layer and is hidden from the user. The full Pharo package can be found at <a href="https://github.com/dlfelps/MZI">dlfeps/MZI</a>.</p>

<p><img src="/assets/images/exp1-annotated.PNG" alt="Experiment #1" title="Experiment #1" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 Photon new
2   beamSplitter;
3   blockLowerPath;
4   mirror;
5   beamSplitter;
6   detector.
</code></pre></div></div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="quantum" /><category term="smalltalk" /><summary type="html"><![CDATA[Introducing the Quantum Smalltalk series In this series I am going to introduce you to some of my favorite quantum experiments while modeling those experiments in Pharo Smalltalk. We will explore the quantum properties of superposition and entanglement. Our experimental model is rather simple - the optical devices typically used in such experiments (i.e. beam splitters, polarizers, mirrors) will be modeled using complex-valued linear transformations. Although the results of matrix multiplication may not surprise you, I hope that the results of these experiments will. I could have called this the “Complex-valued matrix multiplication with Smalltalk series,” but that doesn’t have quite the same ring.]]></summary></entry><entry><title type="html">Experiment 09</title><link href="https://dlfelps.github.io/2022/11/01/inclusive.html" rel="alternate" type="text/html" title="Experiment 09" /><published>2022-11-01T00:00:00+00:00</published><updated>2022-11-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/11/01/inclusive</id><content type="html" xml:base="https://dlfelps.github.io/2022/11/01/inclusive.html"><![CDATA[<p>This post explores the possibility of using <em>inclusive</em> programming languages, i.e. ones that successfully accommodate functional and object-oriented programming styles in a single codebase.</p>

<h2 id="introduction">Introduction</h2>

<p>Python, C++, Java, and C# are 4 out of the top 10 most popular languages on any survey/poll/list, and they have one thing in common - they are all primarily object-oriented languages. This paradigm is characterized by<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p>

<ul>
  <li>Data/operations are encapsulated in objects</li>
  <li>Information hiding is used to protect internal properties of an object</li>
  <li>Objects interact by means of message passing</li>
  <li>Classes are organized in inheritance hierarchies</li>
</ul>

<p>But even these classic languages are now including new features to support a more functional programming style; some people see this as a sign of an upcoming paradigm shift<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. My thoughts are more in line with Richard Feldman who argued in his talk <a href="https://youtu.be/QyJZzq0v7Z4?t=2319">“Why isn’t functional programming the norm?”</a> that we are currently undergoing an intermediate phase where we are starting to apply functional programming techniques within object-oriented languages. This post uses 5 criteria to find suitable languages to be used for this purpose.</p>

<h2 id="inclusive-programming-criteria">Inclusive programming criteria</h2>

<p>The ideal inclusive language is one that allows each individual within a team to follow their preferred programming style (i.e. object-oriented or functional). Alas, no such language exists. We next examine the critical elements necessary to provide successful collaboration between these unique programming styles. These elements are used to <strong>support</strong> and <strong>identify</strong> each paradigm.</p>

<blockquote>
  <p>This concept is distinct from that of <a href="https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Multiparadigm_languages">multiparadigm languages</a>. The primary difference being that while multiparadigm languages might support more than one paradigm, they may not necessarily be well-suited to support more than one paradigm within a single codebase.</p>
</blockquote>

<h3 id="criteria-to-support-an-object-oriented-paradigm">Criteria to support an object-oriented paradigm</h3>

<p>I identify 3 properties that are essential for any object-oriented programmer to feel at home in a language:</p>

<blockquote>
  <p>O1. classes with methods and properties</p>

  <p>O2. encapsulation (i.e. the ability to hide data/methods)</p>

  <p>O3. subtype polymorphism (subtyping)</p>
</blockquote>

<p>Encapsulation and subtyping<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> are necessary to apply common design patterns; they also allow programmers to adhere to guiding principles that are well-known within their community. For example, subtyping enables both the “O” and “L” in <a href="https://stackify.com/solid-design-principles/">S<strong>OL</strong>ID design principles</a>.</p>

<p>This relatively minimal subset of language features doesn’t narrow our options much yet; let’s discuss the elements critical to functional programming.</p>

<h3 id="criteria-to-support-a-functional-paradigm">Criteria to support a functional paradigm</h3>

<p>The two most defining features of the functional programming style are pure functions<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> <sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>and immutable data. But these strategies do not require any special language features. One criteria that is often needed to support functional programming is that functions are treated as first-class citizens<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>.</p>

<blockquote>
  <p>F1. functions are first-class</p>
</blockquote>

<p>Most modern languages treat functions as first-class citizens.</p>

<h3 id="criteria-to-identify-each-paradigm">Criteria to identify each paradigm</h3>

<p>To properly meet our definition of <em>inclusive</em> we must also be able to identify which programming paradigm a particular piece of code follows.</p>

<p>How do you identify object-oriented code? This paradigm is full of easy to spot code smells:</p>
<ul>
  <li>classes</li>
  <li><code class="language-plaintext highlighter-rouge">for</code> loops</li>
  <li>mutable variables</li>
</ul>

<p>How do you identify functional code? At a glance it may be difficult to pin down functional code, but here are a few things to look for:</p>
<ul>
  <li>no classes</li>
  <li>no <code class="language-plaintext highlighter-rouge">for</code> loops</li>
  <li>no mutable variables</li>
  <li>lots of functions</li>
</ul>

<p>Classes and <code class="language-plaintext highlighter-rouge">for</code> loops are easy enough to spot, but what about mutable variables? In order to facilitate this distinction, we add the following criteria:</p>

<blockquote>
  <p>C1. mutable variables must be designated as such</p>
</blockquote>

<p>This final criteria drastically narrows down the field. The remaining<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup> contenders that make our list of inclusive languages are: Kotlin, Scala, Rust, Swift. Let’s briefly examine how each language meets the criteria.</p>

<h2 id="inclusive-languages">Inclusive languages</h2>

<p>This section is included to show how each of the languages meet the inclusive criteria. You may choose to skip it.</p>

<h3 id="kotlin">Kotlin</h3>

<blockquote>
  <p><a href="https://kotlinlang.org/">Kotlin</a> is a “modern programming language that makes developers happier.”</p>
</blockquote>

<ul>
  <li>O1 - has regular classes (plus enums, data classes, and sealed classes)</li>
  <li>O2 - class properties/methods can be made <code class="language-plaintext highlighter-rouge">private</code></li>
  <li>O3 - uses interfaces for creating subtypes</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - immutable variables are initialized with <code class="language-plaintext highlighter-rouge">val</code>; mutable variables are initialized with <code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<h3 id="scala">Scala</h3>

<blockquote>
  <p>“<a href="https://www.scala-lang.org/">Scala</a> combines object-oriented and functional programming in one concise, high-level language.”</p>
</blockquote>

<ul>
  <li>O1 - has regular classes (plus enums and case classes)</li>
  <li>O2 - class properties/methods can be made <code class="language-plaintext highlighter-rouge">private</code></li>
  <li>O3 - uses interfaces for creating subtypes (with mixin composition to compose components)</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - immutable variables are initialized with <code class="language-plaintext highlighter-rouge">val</code>; mutable variables are initialized with <code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<h3 id="rust">Rust</h3>

<blockquote>
  <p><a href="https://www.rust-lang.org/">Rust</a> is a “language empowering everyone to build reliable and efficient software.”</p>
</blockquote>

<ul>
  <li>O1 - has structs with implementation methods</li>
  <li>O2 - everything is <code class="language-plaintext highlighter-rouge">private</code> by default; <code class="language-plaintext highlighter-rouge">pub</code> makes it public</li>
  <li>O3 - uses traits for creating subtypes</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - variables are immutable by default; mutable variables are designated by <code class="language-plaintext highlighter-rouge">mut</code></li>
</ul>

<h3 id="swift">Swift</h3>

<blockquote>
  <p><a href="https://www.swift.org/">Swift</a> is a “general-purpose programming language built using a modern approach to safety, performance, and software design patterns.”</p>
</blockquote>

<ul>
  <li>O1 - has regular classes (also enums and structs)</li>
  <li>O2 - class properties/methods can be made <code class="language-plaintext highlighter-rouge">private</code></li>
  <li>O3 - uses protocols for creating subtypes</li>
  <li>F1 - functions are first-class (also supports anonymous functions)</li>
  <li>C1 - immutable variables are initialized with <code class="language-plaintext highlighter-rouge">let</code>; mutable variables are initialized with <code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<h2 id="why-should-your-team-pick-an-inclusive-language">Why should your team pick an inclusive language?</h2>

<p>Successful software development requires solving two kinds of problems - technical and human.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Junior programmer&#39;s bookshelf: 90% APIs and programming languages; Senior programmer&#39;s bookshelf: 80% applied psychology.</p>&mdash; ☕ J. B. Rainsberger (@jbrains) <a href="https://twitter.com/jbrains/status/616228270841962496?ref_src=twsrc%5Etfw">July 1, 2015</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I believe inclusive languages offer benefits on both of these fronts. On the technical side, neither style is universally superior. The object-oriented approach is usually better if your system operates on things and new features typically involve adding new things (rather than new operations). On the other hand, if new features typically require new operations then a functional style may be a better fit<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>.</p>

<p>They can also be used in conjunction; <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">clean architecture</a> may be a good model. Following this approach, you can model your domain and write all of your core business logic using functional code and follow an object-oriented style at the adapter and interface layers.</p>

<p>I believe that providing your teammates with the ability to code as they want to, using the paradigm of their choice, will increase team happiness and morale. I hope it also encourages conversations and teaching moments from both sides. Will you be more productive? Will you create a better design? Will you get a better product? I don’t know. I haven’t tried this experiment myself.</p>

<h2 id="next-steps">Next steps</h2>

<p>Which language should I pick? Here are a few questions to help you make a decision.</p>

<ul>
  <li>Are you doing systems programming? -&gt; Rust</li>
  <li>Are you working on iOS? -&gt; Swift</li>
  <li>Are you working on Android? -&gt; Kotlin</li>
  <li>Do you need to interoperate with other Java code? -&gt; Scala/Kotlin</li>
</ul>

<p>If you don’t identify strongly with any of the questions above, you may want to consider a language that is easier to learn (especially if you are teaching an entire team). Based on the collective background of the team, here are my recommendations:</p>

<p>If you are coming from a Java background…</p>

<blockquote>
  <p>kotlin &lt; scala &lt; swift &lt; rust</p>
</blockquote>

<p>If you are coming from an Objective-C background…</p>

<blockquote>
  <p>swift &lt; kotlin &lt; rust &lt; scala</p>
</blockquote>

<p>Still unsure? Ok, Ok, don’t twist my arm. Pick Kotlin :)</p>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>You can write crap code in any paradigm. - Dave Farley</p>
</blockquote>

<p>There is clear division between those who use more mainstrain (i.e. object-oriented) languages and those who use functional languages. It is a “them vs. us” mentality, but I believe there is a middle ground where these two crowds can meet, learn, develop, and succeed together. And I believe this middle ground is an <em>inclusive</em> programming language.</p>

<p>Thanks for reading!</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://homes.cs.aau.dk/~normark/prog3-03/html/notes/paradigms_themes-paradigm-overview-section.html#paradigms_oo-paradigm-overview_title_1">Object-oriented paradigm</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>“Why Functional Programming Should Be the Future of Software Development,” IEEE Spectrum, Oct. 23, 2022.  [Online]. Available: https://spectrum.ieee.org/functional-programming. [Accessed: Nov. 14, 2022] <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Subtyping is also known as interface inheritance, whereas subclassing is known as implementation inheritance or code inheritance (see <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov substitution principle</a>). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect (from <a href="https://mostly-adequate.gitbook.io/mostly-adequate-guide/ch03">Professor Frisby’s Mostly Adequate Guide to Functional Programming</a>) <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>A side effect is a change of system state or observable interaction with the outside world that occurs during the calculation of a result. Examples include: reading a file, inserting a record into a database, making an http call, printing to the screen, or getting user input. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>This means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>Several languages just missed the cut. C#, C++, Java, and Go meet all the conditions except that mutable variables are not designated. F# and OCaml actually met all the criteria, but I do not believe that the average object-oriented programmer would be comfortable using them. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>Philip Wadler named this the <a href="http://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt">expression problem</a>. Another good reference <a href="https://www.cs.cornell.edu/courses/cs3110/2015fa/l/25-expression/lec.pdf">here</a>. <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="inclusive" /><category term="programming-languages" /><category term="kotlin" /><category term="scala" /><category term="rust" /><category term="swift" /><category term="functional" /><category term="object-oriented" /><summary type="html"><![CDATA[This post explores the possibility of using inclusive programming languages, i.e. ones that successfully accommodate functional and object-oriented programming styles in a single codebase.]]></summary></entry><entry><title type="html">Experiment 08</title><link href="https://dlfelps.github.io/2022/10/03/DSL3.html" rel="alternate" type="text/html" title="Experiment 08" /><published>2022-10-03T00:00:00+00:00</published><updated>2022-10-03T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/10/03/DSL3</id><content type="html" xml:base="https://dlfelps.github.io/2022/10/03/DSL3.html"><![CDATA[<p>The final post explains how to use an external <strong>domain specific language</strong> to load records after compile time!</p>

<h2 id="introduction">Introduction</h2>

<p>In the previous two posts we explored several ways to model a simple stock trading domain using syntax that is available (or extendable) within F#. This can be described as an <em>internal</em> domain specific language; the biggest limitation with this approach is that all data must be entered before the program is compiled - not very realistic if you want to trade stocks regularly. This post explores how to create an <em>external</em> domain specific language that can be used to load records after compile time.</p>

<h2 id="parser-combinators">Parser combinators</h2>

<p>The most common way to load text data is a delimted text loader, but this only works if your input is structured (i.e. every column of data is aligned). For this post, I want to use a more powerful tool - parser combinators. Parser combinators implement a formal grammar over the input, which we need to interpret a domain specific language. But this post is not a full parser combinator tutorial. In fact, we will use the <code class="language-plaintext highlighter-rouge">parse</code> computation expression from the <a href="https://github.com/stephan-tolksdorf/fparsec">FParsec</a> library instead of the more tradional (and recommended) parser combinator symbols (e.g <code class="language-plaintext highlighter-rouge">&lt;|&gt;</code>, <code class="language-plaintext highlighter-rouge">.&lt;&lt;.</code>, … ). For a deeper dive, see these tutorials <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. To demonstrate the power of this approach, I will use a parser that can interpret the syntax from either data model 2a or 2b from <a href="/2022/10/02/DSL2.html">post #2</a> in this series. Here are a few examples of valid inputs:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">Buy 4 SharesOf MSFT At 258.32 AllOrNone
Sell 3 SharesOf META At 158.71 
Sell 6 GOOGL 106.08</span></code></pre></figure>

<h2 id="parser-combinator-workflow-overview">Parser combinator workflow overview</h2>

<p>I find it easiest to follow this code by starting at the result and working backwards. Here is an overview of how the pieces fit together before we dig into the code (arrows are labeled with output type).</p>

<p><img src="/assets/images/mermaid-diagram-2022-09-27-070837.svg" alt="Parser combinator program flow" title="Parser combinator program flow" /></p>

<h2 id="step-3-runparseronfile">Step 3: runParserOnFile</h2>

<p>We begin with the final step - to run the complete parser on our input file. Here is the code:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">result</span><span class="p">:</span> <span class="nc">ParserResult</span><span class="p">&lt;</span><span class="nc">Trade</span> <span class="kt">list</span><span class="p">,</span><span class="kt">unit</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">runParserOnFile</span> <span class="p">(</span><span class="n">many</span> <span class="n">parseTrade</span><span class="p">)</span> <span class="bp">()</span> <span class="s2">"input.txt"</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nn">Encoding</span><span class="p">.</span><span class="nc">ASCII</span>

<span class="k">let</span> <span class="n">trades</span><span class="p">:</span> <span class="nc">Trade</span> <span class="kt">list</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">result</span> <span class="k">with</span>
  <span class="p">|</span> <span class="nc">Success</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nc">Trade</span> <span class="kt">list</span><span class="o">,_,_)</span> <span class="p">-&gt;</span> <span class="n">x</span>
  <span class="p">|</span> <span class="p">_</span> <span class="p">-&gt;</span> <span class="bp">[]</span></code></pre></figure>

<p>The code uses the a built-in <code class="language-plaintext highlighter-rouge">FParsec</code> function called <code class="language-plaintext highlighter-rouge">runParserOnFile</code>, which takes the following arguments:</p>
<ul>
  <li>parser <code class="language-plaintext highlighter-rouge">(many parseTrade)</code></li>
  <li>initial user state <code class="language-plaintext highlighter-rouge">()</code></li>
  <li>input file <code class="language-plaintext highlighter-rouge">input.txt</code></li>
  <li>file encoding  <code class="language-plaintext highlighter-rouge">System.Text.Encoding.ASCII</code></li>
</ul>

<p>The parser argument combines two functions: the built-in <code class="language-plaintext highlighter-rouge">FParsec</code> function <code class="language-plaintext highlighter-rouge">many</code><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> and our custom parser <code class="language-plaintext highlighter-rouge">parseTrade</code>, which we describe in the next section.  If the file is parsed successfully then we can extract our list of trades from the <code class="language-plaintext highlighter-rouge">ParseResult</code> type.</p>

<h2 id="step-2-parsetrade">Step 2: parseTrade</h2>

<p>The basic idea with this parser is that we are composing<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> many simple parsers into a more complex parser that captures the grammar/rules of our domain specific language. Here is the finished parser:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">parseTrade</span> <span class="p">=</span>
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">buyOrSell</span> <span class="p">=</span> <span class="n">parseTransaction</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">parseNumShares</span>         
    <span class="k">do</span><span class="o">!</span> <span class="n">optionalIgnore</span> <span class="s2">"SharesOf"</span>    
    <span class="k">let</span><span class="o">!</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">parseTicker</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">optionalIgnore</span> <span class="s2">"At"</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">price</span> <span class="p">=</span> <span class="n">parsePrice</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="n">parsePortion</span> 

    <span class="k">return</span> <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="n">buyOrSell</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">numShares</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">ticker</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="n">allOrNone</span><span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">parse</code> computation expression does a lot for us here. Under the hood, it threads together the sequence of assignments so that consecutive parsers are linked. The basic idea is shown in the diagram below.</p>

<p><img src="/assets/images/mermaid-diagram-2022-09-29-100911.svg" alt="Parse computation expression" title="Parse computation expression" /></p>

<p>Each call parses a different part of the transaction. We will examine a few of these parsers more closely in the following section, but for now just try to understand how this works at a high level.</p>

<p><code class="language-plaintext highlighter-rouge">parseTrade</code> proceeds by parsing (or ignoring) the necessary values to create a <code class="language-plaintext highlighter-rouge">Trade</code> type and return it<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>.</p>

<h2 id="step-1-individual-token-parsers">Step 1: individual token parsers</h2>

<p>Each of snippet of code below is a parser that detects a specific token from our domain specific language. We will look at a few of these smaller parsers to highlight some fundamental parsing elements. The full code listing can be found <a href="https://github.com/dlfelps/dsl-examples/blob/main/exp08-parser-combinator.fsx">here</a>. The first snippet detects the token <em>Buy</em> or <em>Sell</em>.</p>

<h3 id="do-let-pstring-choice"><code class="language-plaintext highlighter-rouge">do!</code>, <code class="language-plaintext highlighter-rouge">let!</code>, <code class="language-plaintext highlighter-rouge">pstring</code>, <code class="language-plaintext highlighter-rouge">choice</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">convertTransaction</span> <span class="n">inputString</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">inputString</span> <span class="k">with</span>
  <span class="p">|</span> <span class="s2">"Sell"</span> <span class="p">-&gt;</span> <span class="nc">Sell</span>
  <span class="p">|</span> <span class="p">_</span> <span class="p">-&gt;</span> <span class="nc">Buy</span>

<span class="k">let</span> <span class="n">parseTransaction</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">buyOrSellString</span> <span class="p">=</span> <span class="n">choice</span> <span class="o">[(</span><span class="n">pstring</span> <span class="s2">"Buy"</span><span class="o">);(</span><span class="n">pstring</span> <span class="s2">"Sell"</span><span class="o">)]</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">convertTransaction</span> <span class="n">buyOrSellString</span><span class="p">)</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Notice that <code class="language-plaintext highlighter-rouge">parseTransaction</code> is itself another <code class="language-plaintext highlighter-rouge">parse</code> computation expression. First I will describe the purpose of each line, then we will discuss syntax.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 08</code> Skip any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 09</code> Check if the input begins with “Buy” or “Sell”</li>
  <li><code class="language-plaintext highlighter-rouge">Line 10</code> If successful, convert the string to its corresponding type (e.g. <code class="language-plaintext highlighter-rouge">Buy</code> type) and return</li>
</ul>

<p>Now let’s revist any new syntax. The <code class="language-plaintext highlighter-rouge">do</code> keyword in F# requires the following expression to return <code class="language-plaintext highlighter-rouge">unit</code>. Similarly, the <code class="language-plaintext highlighter-rouge">do!</code> notation on <code class="language-plaintext highlighter-rouge">Line 08</code> is used in a computation expression when the following expression returns a “unit-like” value<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>.</p>

<p><code class="language-plaintext highlighter-rouge">Line 09</code> uses two new commands. <code class="language-plaintext highlighter-rouge">pstring</code> creates a parser that succeeds if it encounters its argument (i.e. “Buy” or “Sell”) and fails otherwise. <code class="language-plaintext highlighter-rouge">choice</code> composes these two parsers in a way such that it returns the value of the first successful parser. If both fail then the <code class="language-plaintext highlighter-rouge">choice</code> parser fails.</p>

<p>The difference between <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">let!</code> is analogous to <code class="language-plaintext highlighter-rouge">do</code> and <code class="language-plaintext highlighter-rouge">do!</code> - <code class="language-plaintext highlighter-rouge">let!</code> binds a name to an value that is within a computation expression context <sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>.</p>

<h3 id="pint32-pfloat"><code class="language-plaintext highlighter-rouge">pint32</code>, <code class="language-plaintext highlighter-rouge">pfloat</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">parseNumShares</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">pint32</span>
    <span class="k">return</span> <span class="n">numShares</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Stepping through this snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 03</code> Skip any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 04</code> Read an integer</li>
  <li><code class="language-plaintext highlighter-rouge">Line 05</code> Return the integer</li>
</ul>

<p>You will recognize most of the syntax here, with the exception of <code class="language-plaintext highlighter-rouge">pint32</code>, which parses 1 or more digits as an integer. Although not shown here <code class="language-plaintext highlighter-rouge">parsePrice</code> uses the related function <code class="language-plaintext highlighter-rouge">pfloat</code>.</p>

<h3 id="skipmany-return"><code class="language-plaintext highlighter-rouge">skipMany</code>, <code class="language-plaintext highlighter-rouge">return!</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">optionalIgnore</span> <span class="n">str</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">return</span><span class="o">!</span> <span class="n">skipMany</span> <span class="p">(</span><span class="n">pstring</span> <span class="n">str</span><span class="p">)</span>    
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This code snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 03</code> Skips any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 04</code> Creates a parser for the function argument <code class="language-plaintext highlighter-rouge">str</code> and skips it if found and returns <em>without</em> wrapping in a parser context</li>
</ul>

<p>This function is used to create parsers for our placeholder types (i.e. <code class="language-plaintext highlighter-rouge">SharesOf</code> and <code class="language-plaintext highlighter-rouge">At</code>). <code class="language-plaintext highlighter-rouge">skipMany</code> will apply the parser 0 or more times and throw away any tokens found. The careful reader will also notice the use of <code class="language-plaintext highlighter-rouge">return!</code> instead of <code class="language-plaintext highlighter-rouge">return</code>. The simple rule is use <code class="language-plaintext highlighter-rouge">return</code> if you need to wrap a value in the context of the computation expression (i.e. a parser) and use <code class="language-plaintext highlighter-rouge">return!</code> if the value already has the correct context<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>.</p>

<h3 id="many1-asciiupper"><code class="language-plaintext highlighter-rouge">many1</code>, <code class="language-plaintext highlighter-rouge">asciiUpper</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">convertTicker</span> <span class="n">inputString</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">inputString</span> <span class="k">with</span>
  <span class="p">|</span> <span class="s2">"GOOGL"</span> <span class="p">-&gt;</span> <span class="nc">GOOGL</span>
  <span class="p">|</span> <span class="s2">"META"</span> <span class="p">-&gt;</span> <span class="nc">META</span>
  <span class="p">|</span> <span class="p">_</span> <span class="p">-&gt;</span> <span class="nc">MSFT</span>

<span class="k">let</span> <span class="n">parseTicker</span> <span class="p">=</span> 
  <span class="n">parse</span><span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">tickerCharList</span> <span class="p">=</span> <span class="p">(</span><span class="n">many1</span> <span class="n">asciiUpper</span><span class="p">)</span> 
    <span class="k">let</span> <span class="n">tickerString</span> <span class="p">=</span>  <span class="n">tickerCharList</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="kt">string</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">reduce</span> <span class="o">(+)</span>
    <span class="k">let</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">convertTicker</span> <span class="n">tickerString</span>
    <span class="k">return</span> <span class="n">ticker</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>This code snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 09</code> Skips any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 10</code> Creates a parser that accepts one or more capitalized characters in ‘A’ - ‘Z’</li>
  <li><code class="language-plaintext highlighter-rouge">Line 11</code> Converts the character list into a single string</li>
  <li><code class="language-plaintext highlighter-rouge">Line 12</code> Maps the string to the corresponding <code class="language-plaintext highlighter-rouge">Stock</code> type</li>
</ul>

<p>This parser demonstrates two more primitive functions - <code class="language-plaintext highlighter-rouge">many1</code> and <code class="language-plaintext highlighter-rouge">asciiUpper</code>. Combined they create a parser that accepts 1 or more upper case ASCII characters. The other notable feature about <code class="language-plaintext highlighter-rouge">parseTicker</code> is that it mixes the use of <code class="language-plaintext highlighter-rouge">let!</code> and <code class="language-plaintext highlighter-rouge">let</code>. The <code class="language-plaintext highlighter-rouge">let!</code> on <code class="language-plaintext highlighter-rouge">Line 10</code> unwraps the parser context from the expresson on the right to bind <code class="language-plaintext highlighter-rouge">ticketCharList</code> to a list of characters. The following two lines perform operations on regular F# types so they use the <code class="language-plaintext highlighter-rouge">let</code> keyword.</p>

<h3 id="preturn"><code class="language-plaintext highlighter-rouge">preturn</code></h3>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="k">let</span> <span class="n">parsePortion</span> <span class="p">=</span> 
  <span class="n">parse</span> <span class="p">{</span>
    <span class="k">do</span><span class="o">!</span> <span class="n">spaces</span>
    <span class="k">let</span><span class="o">!</span> <span class="n">portion</span> <span class="p">=</span> <span class="n">choice</span> <span class="o">[(</span><span class="n">pstring</span> <span class="s2">"AllOrNone"</span><span class="o">);</span> <span class="p">(</span><span class="n">pstring</span> <span class="s2">"Partial"</span><span class="o">);</span> <span class="p">(</span><span class="n">preturn</span> <span class="s2">"AllOrNone"</span><span class="o">)]</span>
    <span class="k">return</span> <span class="n">portion</span> <span class="p">=</span> <span class="s2">"AllOrNone"</span>
  <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Stepping through this snippet:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Line 03</code> Skip any whitespace</li>
  <li><code class="language-plaintext highlighter-rouge">Line 04</code> Check if the input begins with “AllOrNone” or “Partial”; if neither return “AllOrNone”</li>
  <li><code class="language-plaintext highlighter-rouge">Line 05</code> Return true if previous assignment was “AllOrNone”</li>
</ul>

<p>This parser is very similar to <code class="language-plaintext highlighter-rouge">parseTransaction</code> but it demonstrates use of the <code class="language-plaintext highlighter-rouge">preturn</code> primitive. <code class="language-plaintext highlighter-rouge">preturn</code> always succeeds with the provided value; here I use it as a default value <code class="language-plaintext highlighter-rouge">choice</code> parser by providing it as a final value (only used if all other choices fail).</p>

<p>At this point it is probably worthwhile to revist <a href="#step-2-parsetrade">Step 2</a> for a better understanding of the composition of <code class="language-plaintext highlighter-rouge">parseTrade</code>. The code listing for this series can be found <a href="https://github.com/dlfelps/dsl-examples">here</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>“A complex system that works is invariably found to have evolved from a simple system that worked.” - Gall’s law (John Gall)</p>
</blockquote>

<p>My favorite three things about parser combinators are:</p>
<ol>
  <li>There are many built-in primitive parsers</li>
  <li>Simple parsers are easy to create and test</li>
  <li>Complex parsers are easy to create by composing simple parsers</li>
</ol>

<p>I hope this post has demonstrated a useful application of parser combinators. But it may not have been as successful in convincing you the value of external domain specific languages - that’s probably because I can’t honestly make a good argument for them. If your program reads input from another machine then it will certainly be of a structured form (e.g. JSON). If your program reads input from a human then I doubt a domain specific language is the most natural way for the human to input data. I can’t think of a realistic example where a domain specific language would be better than a graphical user interface.</p>

<p><img src="/assets/images/ETRADE-mobile-stock-quote.png" alt="Stock App" title="Stock App" /></p>

<p>On the other hand, I have benefited from using <strong>embedded domain modeling</strong>. Using natural notions about the world within my code has made it easier to write, reason about, and revisit. If I have piqued your interest in domain modeling, then I would recommend browsing the related topics below. I believe each topic has something different to offer  (like the <a href="https://en.wikipedia.org/wiki/Blind_men_and_an_elephant">parable of the blind men and the elephant</a>).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Beginner resources</th>
      <th style="text-align: center">Author</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TDD</td>
      <td style="text-align: center"><a href="https://blog.ploeh.dk/2015/08/10/type-driven-development/">Type Driven Development</a></td>
      <td style="text-align: center">Mark Seemann</td>
    </tr>
    <tr>
      <td style="text-align: center">DDD-light</td>
      <td style="text-align: center"><a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/">Domain Modeling Made Functional</a></td>
      <td style="text-align: center">Scott Wlascin</td>
    </tr>
    <tr>
      <td style="text-align: center">APIs</td>
      <td style="text-align: center"><a href="http://www.infoq.com/presentations/effective-api-design">How to Design a Good API &amp; Why it Matters</a></td>
      <td style="text-align: center">Josh Bloch</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Advanced resources</th>
      <th style="text-align: center">Author</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">DDD</td>
      <td style="text-align: center"><a href="https://www.youtube.com/watch?v=pMuiVlnGqjk">Domain Driven Design</a></td>
      <td style="text-align: center">Eric Evans</td>
    </tr>
    <tr>
      <td style="text-align: center">DSL</td>
      <td style="text-align: center"><a href="https://martinfowler.com/books/dsl.html">Domain Specific Languages</a></td>
      <td style="text-align: center">Martin Fowler</td>
    </tr>
    <tr>
      <td style="text-align: center">MDD</td>
      <td style="text-align: center">Model-driven development: The good, the bad, and the ugly</td>
      <td style="text-align: center">Hailpern/Tarr</td>
    </tr>
    <tr>
      <td style="text-align: center">LOP</td>
      <td style="text-align: center">Language Oriented Programming</td>
      <td style="text-align: center">Ward</td>
    </tr>
  </tbody>
</table>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="http://www.quanttec.com/fparsec/tutorial.html">FParsec Tutorial</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/">fsharpforfunandprofit </a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><code class="language-plaintext highlighter-rouge">many</code> indicates that we expect to run <code class="language-plaintext highlighter-rouge">parseTrade</code> zero or more times (depending on the number of lines in our input file). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>Instead of using the more traditional parser combinator functions (e.g. <code class="language-plaintext highlighter-rouge">&lt;|&gt;</code>, <code class="language-plaintext highlighter-rouge">.&gt;&gt;.</code>, …) I elected to use a more familiar syntax with the <code class="language-plaintext highlighter-rouge">parse</code> computation expression from FParsec. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>Within a computation expression, <code class="language-plaintext highlighter-rouge">return</code> performs an operation that is the opposite of <code class="language-plaintext highlighter-rouge">let!</code> - it wraps the value within a context specified by the computation expression. In this case the value has a <code class="language-plaintext highlighter-rouge">Trade</code> type, so <code class="language-plaintext highlighter-rouge">parseTrade</code> actually returns a value of type <code class="language-plaintext highlighter-rouge">Parser&lt;Trade, unit&gt;</code>. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>The function <a href="https://www.quanttec.com/fparsec/reference/charparsers.html#members.spaces"><code class="language-plaintext highlighter-rouge">spaces</code></a> has type <code class="language-plaintext highlighter-rouge">Parser&lt;unit,'u&gt;</code>, which is unit-like within this context. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>In this case the context is <code class="language-plaintext highlighter-rouge">ParserResult&lt;T&gt;</code>; <code class="language-plaintext highlighter-rouge">let!</code> binds the type <code class="language-plaintext highlighter-rouge">T</code>. This pattern is commonly used with the <code class="language-plaintext highlighter-rouge">async {}</code> computation expression. <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>Note that <code class="language-plaintext highlighter-rouge">parseTrade</code> calls this function with <code class="language-plaintext highlighter-rouge">do!</code> since it returns a unit-like parser. <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="dsl" /><category term="ddd" /><summary type="html"><![CDATA[The final post explains how to use an external domain specific language to load records after compile time!]]></summary></entry><entry><title type="html">Experiment 07</title><link href="https://dlfelps.github.io/2022/10/02/DSL2.html" rel="alternate" type="text/html" title="Experiment 07" /><published>2022-10-02T00:00:00+00:00</published><updated>2022-10-02T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/10/02/DSL2</id><content type="html" xml:base="https://dlfelps.github.io/2022/10/02/DSL2.html"><![CDATA[<p>The second post in the <strong>domain specific language</strong> series demonstrates how you can use F# computation expressions to create an embedded language.</p>

<h2 id="introduction">Introduction</h2>

<p><em>Please read the <a href="/2022/10/01/DSL1.html">first post</a> in this series before continuing.</em></p>

<p>This post demonstrates how to create a custom <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions">computation expression</a> to capture data. You may have already used computation expressions without knowing it -  <code class="language-plaintext highlighter-rouge">seq {}</code> and <code class="language-plaintext highlighter-rouge">async {}</code> are both built using computation expressions. Computation expressions  provide users with a way to extend F#. This ability is most similar to macros or metaprogramming abilities of other languages (e.g. LISP, Rust, Ruby, Template Haskell), but I find computation expressions more straightforward to understand and use. In this post, we will see how to create three kinds of computation expressions to model our data.</p>

<p>Our first example uses computation expressions to create a concise record syntax.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="n">trade</span><span class="p">{</span>
    <span class="nc">Buy</span> <span class="mi">4</span> <span class="nc">MSFT</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">3</span> <span class="nc">META</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">6</span> <span class="nc">GOOGL</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span> <span class="nc">AllOrNone</span>
  <span class="p">}</span></code></pre></figure>

<h2 id="data-model-2a-concise-record-syntax">Data model #2a (Concise record syntax)</h2>

<p>The expression above creates the same list of <code class="language-plaintext highlighter-rouge">Trade</code> records as in the first post without having to specify the record’s field names. We might choose this data model if we want a <em>concise</em> record syntax.</p>

<p>We accomplish this syntax by creating a <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#extending-existing-builders-with-new-custom-operations">custom computation expression</a>. First, define a <code class="language-plaintext highlighter-rouge">TradeBuilder</code> class and provide an implementation for <code class="language-plaintext highlighter-rouge">Yield</code><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Then implement two custom operations (tagged with the <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-customoperationattribute.html"><code class="language-plaintext highlighter-rouge">CustomOperation</code></a> attribute). Due to the domain and record layout, I decided it was natural to use <code class="language-plaintext highlighter-rouge">Buy</code> and <code class="language-plaintext highlighter-rouge">Sell</code> as keywords to create the record. Each method takes 5 parameters: the first argument captures trades that were created above the current trade but within the same computation expression; it has type <code class="language-plaintext highlighter-rouge">seq&lt;Trade&gt;</code>. The next 4 parameters match those of the record (except <code class="language-plaintext highlighter-rouge">price</code>, which takes a <code class="language-plaintext highlighter-rouge">float</code> and is converted to <code class="language-plaintext highlighter-rouge">decimal</code>).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">type</span> <span class="nc">TradeBuilder</span><span class="bp">()</span> <span class="p">=</span>

      <span class="k">member</span> <span class="o">_.</span><span class="nc">Yield</span> <span class="p">_</span> <span class="p">=</span> <span class="bp">[]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Buy"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Buy</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Sell"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Sell</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span></code></pre></figure>

<p>Before we can use the computation expression, we must initialize it with:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trade</span> <span class="p">=</span> <span class="nn">Trade</span><span class="p">.</span><span class="nc">TradeBuilder</span><span class="bp">()</span>

<span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="n">trade</span><span class="p">{</span>
    <span class="nc">Buy</span> <span class="mi">4</span> <span class="nc">MSFT</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">3</span> <span class="nc">META</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">6</span> <span class="nc">GOOGL</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span> <span class="nc">AllOrNone</span>
  <span class="p">}</span></code></pre></figure>

<p>Then if we run <code class="language-plaintext highlighter-rouge">Trade.tradeMany trades</code> we get the correct output:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">You just purchased 4 shares of MSFT for a total cost of $</span>1,033.28.
<span class="gp">You just sold 3 shares of META for a total earnings of $</span>476.13.
<span class="gp">You just sold 6 shares of GOOGL for a total earnings of $</span>636.48.
<span class="go">-------------------------------------------------------------------
</span><span class="gp">You just executed a series of trades that earned you $</span>79.33.</code></pre></figure>

<h2 id="data-model-2b-concise-record-syntax-with-placeholders">Data model #2b (Concise record syntax with placeholders)</h2>

<p>Our first attempt at a data model has a serious flaw - without specifying the field names it could be very easy to forget to include a field or put it in the wrong order. Imagine a record with 5 fields all the same type (e.g. decimal), how would you keep them straight? In some domains it may be appropriate to add a few placeholder keywords to help keep things straight. In this example, the following probably reads much better to domain experts:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="n">trade</span><span class="p">{</span>
    <span class="nc">Buy</span> <span class="mi">4</span> <span class="nc">SharesOf</span> <span class="nc">MSFT</span> <span class="nc">At</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">3</span> <span class="nc">SharesOf</span> <span class="nc">META</span> <span class="nc">At</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span> <span class="nc">AllOrNone</span>
    <span class="nc">Sell</span> <span class="mi">6</span> <span class="nc">SharesOf</span> <span class="nc">GOOGL</span> <span class="nc">At</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span> <span class="nc">AllOrNone</span>
  <span class="p">}</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">SharesOf</code> keyword tells you 2 things - the previous parameter was the number of shares and the following parameter is the stock ticker. The <code class="language-plaintext highlighter-rouge">At</code> keyword separates the price constraints for the trade. This is still much more concise than specifying all the field names and it improves readability. To update  the <code class="language-plaintext highlighter-rouge">TradeBuilder</code> code we need to define two new types (<code class="language-plaintext highlighter-rouge">SharesOf</code> and <code class="language-plaintext highlighter-rouge">At</code>) and add them to the parameter list of each method.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">type</span> <span class="nc">SharesOf</span> <span class="p">=</span> <span class="nc">SharesOf</span>
<span class="k">type</span> <span class="nc">At</span> <span class="p">=</span> <span class="nc">At</span>

<span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">type</span> <span class="nc">TradeBuilder</span><span class="bp">()</span> <span class="p">=</span>

      <span class="k">member</span> <span class="o">_.</span><span class="nc">Yield</span> <span class="p">_</span> <span class="p">=</span> <span class="bp">[]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Buy"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Buy</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">sharesOf</span><span class="p">:</span><span class="nc">SharesOf</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span><span class="nc">At</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Sell"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Sell</span> <span class="p">(</span><span class="n">previous</span><span class="p">:</span> <span class="n">seq</span><span class="p">&lt;</span><span class="nc">Trade</span><span class="o">&gt;,</span> <span class="n">numShares</span><span class="p">:</span><span class="kt">int</span><span class="p">,</span> <span class="n">sharesOf</span><span class="p">:</span><span class="nc">SharesOf</span><span class="p">,</span> <span class="n">ticker</span><span class="p">:</span><span class="nc">Stocks</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span><span class="nc">At</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span><span class="kt">float</span><span class="p">,</span> <span class="n">allOrNone</span><span class="p">:</span><span class="nc">Portion</span><span class="p">)</span> <span class="p">=</span> 
        <span class="p">[</span><span class="k">yield</span><span class="o">!</span> <span class="n">previous</span>
         <span class="k">yield</span> <span class="p">{</span><span class="n">buyOrSell</span><span class="p">=</span><span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="n">ticker</span><span class="p">;</span><span class="n">numShares</span><span class="p">=</span><span class="n">numShares</span><span class="p">;</span><span class="n">price</span><span class="p">=</span><span class="n">decimal</span><span class="p">(</span><span class="n">price</span><span class="o">);</span><span class="n">allOrNone</span><span class="o">=(</span><span class="n">allOrNone</span><span class="p">=</span><span class="nc">AllOrNone</span><span class="o">)}]</span>
        </code></pre></figure>

<h2 id="data-model-2c-fluent-record-syntax">Data model #2c (Fluent record syntax)</h2>

<p>The final computation expression uses the <a href="https://refactoring.guru/design-patterns/builder">Builder Design Pattern</a> and a Fluent expression style to create trades. This approach is most useful when you can set default values for everything and then specify a subset of fields to update (similar to the <code class="language-plaintext highlighter-rouge">{default with ...}</code> record syntax). It also provides a way to set fields in any order. But unlike the previous two computation expressions, this approach only creates a single trade per expression.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">trades</span> <span class="p">=</span> 
  <span class="p">[</span>
    <span class="n">trade</span> <span class="p">{</span>
      <span class="nc">Buy</span> <span class="mi">4</span>
      <span class="nc">SharesOf</span> <span class="nc">MSFT</span>
      <span class="nc">At</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span>
      <span class="nc">AllOrNone</span>
    <span class="o">};</span>
    <span class="c1">//AllOrNone optional</span>
    <span class="n">trade</span> <span class="p">{</span>
      <span class="nc">Sell</span> <span class="mi">3</span>
      <span class="nc">SharesOf</span> <span class="nc">META</span>
      <span class="nc">At</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span>      
    <span class="o">};</span>
    <span class="c1">// order-independent</span>
    <span class="n">trade</span> <span class="p">{</span>
      <span class="nc">AllOrNone</span>
      <span class="nc">At</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span>      
      <span class="nc">SharesOf</span> <span class="nc">GOOGL</span>
      <span class="nc">Sell</span> <span class="mi">6</span>
    <span class="o">};</span>
  <span class="p">]</span>
        </code></pre></figure>

<p>As you might have guessed, the code for this data model is significantly different. <code class="language-plaintext highlighter-rouge">Yield</code> now provides the default record and we must specify custom operations for <code class="language-plaintext highlighter-rouge">Buy</code>, <code class="language-plaintext highlighter-rouge">Sell</code>, <code class="language-plaintext highlighter-rouge">SharesOf</code>, <code class="language-plaintext highlighter-rouge">At</code>, <code class="language-plaintext highlighter-rouge">AllOrNone</code>, and <code class="language-plaintext highlighter-rouge">Partial</code>. Each method takes the current trade and updates the corresponding field.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">let</span> <span class="n">baseTrade</span> <span class="p">=</span> <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span><span class="p">=</span><span class="nc">MSFT</span><span class="p">;</span> <span class="n">numShares</span><span class="p">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">price</span><span class="p">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="p">}</span>

  <span class="k">type</span> <span class="nc">TradeBuilder</span><span class="bp">()</span> <span class="p">=</span>

      <span class="k">member</span> <span class="o">_.</span><span class="nc">Yield</span> <span class="p">_</span> <span class="p">=</span> <span class="n">baseTrade</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Buy"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Buy</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">input</span><span class="p">;</span> <span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Buy</span><span class="p">}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Sell"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Sell</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">numShares</span> <span class="p">=</span> <span class="n">input</span><span class="p">;</span> <span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Sell</span><span class="p">}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"SharesOf"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Ticker</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="nc">Stocks</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">ticker</span> <span class="p">=</span> <span class="n">input</span><span class="p">}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"At"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Price</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="kt">float</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">price</span> <span class="p">=</span> <span class="n">decimal</span><span class="p">(</span><span class="n">input</span><span class="o">)}</span>

      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"AllOrNone"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">AllOrNone</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="bp">true</span><span class="p">}</span>
    
      <span class="p">[&lt;</span><span class="nc">CustomOperation</span><span class="p">(</span><span class="s2">"Partial"</span><span class="o">)&gt;]</span>
      <span class="k">member</span> <span class="o">_.</span><span class="nc">Partial</span> <span class="p">(</span><span class="n">trade</span><span class="p">:</span> <span class="nc">Trade</span><span class="p">)</span> <span class="p">=</span> <span class="p">{</span><span class="n">trade</span> <span class="k">with</span> <span class="n">allOrNone</span> <span class="p">=</span> <span class="bp">false</span><span class="p">}</span>
        </code></pre></figure>

<p>The code listing for this series can be found <a href="https://github.com/dlfelps/dsl-examples">here</a>.</p>

<h2 id="some-other-examplesreferences">Some other examples/references</h2>

<p>In my opinion, custom computational expressions are an underutilized feature of F#. They are much more flexible/powerful than I am showing here so if you would like learn more please check out the following resources that use custom computation expressions.</p>

<p><a href="https://github.com/panesofglass/computation-expressions-workshop">Computation expressions workshop</a></p>

<p><a href="https://www.youtube.com/watch?v=pC4ZIeOmgB0&amp;t=2461s">Computation Expressions Explained - Youtube</a></p>

<p><a href="https://atlemann.github.io/fsharp/2019/12/11/mindstorms-dsl.html">Lego Mindstorms DSL</a></p>

<p><a href="https://github.com/fsprojects/FsHttp/blob/master/src/FsHttp/Dsl.CE.fs">FsHttp CE</a></p>

<h2 id="next">Next</h2>

<p>In the final post of this series we will learn about the difference between an internal and external domain specific language and use <a href="https://github.com/stephan-tolksdorf/fparsec">FParsec</a> to load records after compile time!</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#creating-a-new-type-of-computation-expression <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="dsl" /><category term="ddd" /><summary type="html"><![CDATA[The second post in the domain specific language series demonstrates how you can use F# computation expressions to create an embedded language.]]></summary></entry><entry><title type="html">Experiment 06</title><link href="https://dlfelps.github.io/2022/10/01/DSL1.html" rel="alternate" type="text/html" title="Experiment 06" /><published>2022-10-01T00:00:00+00:00</published><updated>2022-10-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/10/01/DSL1</id><content type="html" xml:base="https://dlfelps.github.io/2022/10/01/DSL1.html"><![CDATA[<p>The first post in the <strong>domain specific language</strong> series explores the basics of domain modeling using record types in F#.</p>

<h2 id="introduction">Introduction</h2>

<p>A recent study<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> found that programmers who used functional, statically-typed languages often started a programming task by constructing types to model their problem domain.  I do too, but it’s how I start any complex task (even non-programming tasks). The ability to easily create types is partially what drew me to F# in the first place. I use static types as a lightweight specification language; I can designate high level functions with their anticipated signatures (using types that make sense within the domain) and then the compiler tells me when I stray from that specification as I implement.</p>

<p><img src="/assets/images/hedberg.jpg" alt="Mitch Hedberg" title="Mitch Hedberg" /></p>

<h2 id="study-domain">Study domain</h2>

<p>To motivate this series of posts I chose a similar domain to that used in the book <a href="https://www.manning.com/books/dsls-in-action">DSLs in Action</a>. But since I don’t have a book’s worth of content I will only adopt a subset of this domain to demonstrate my examples. We will model a simplified stock transaction.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>Simple transaction</strong></th>
      <th style="text-align: center"><strong>type</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Buy/Sell</td>
      <td style="text-align: center">discriminated union</td>
    </tr>
    <tr>
      <td style="text-align: center">Which stock?</td>
      <td style="text-align: center">discriminated union</td>
    </tr>
    <tr>
      <td style="text-align: center">Price?</td>
      <td style="text-align: center">decimal</td>
    </tr>
    <tr>
      <td style="text-align: center">How many?</td>
      <td style="text-align: center">int</td>
    </tr>
    <tr>
      <td style="text-align: center">Partial/AllOrNone</td>
      <td style="text-align: center">bool</td>
    </tr>
  </tbody>
</table>

<h2 id="data-model-1-record-type">Data model #1 (Record type)</h2>

<p>We start by modeling the domain with an F# Record type. Let me say for the <em>record</em> that I use F# record types 98% of the time. I rarely have a good reason to use anything else. Here is one way to create the record type.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">type</span> <span class="nc">Transaction</span> <span class="p">=</span> <span class="nc">Buy</span> <span class="p">|</span> <span class="nc">Sell</span>

<span class="k">type</span> <span class="nc">Stocks</span> <span class="p">=</span> <span class="nc">MSFT</span> <span class="p">|</span> <span class="nc">GOOGL</span> <span class="p">|</span> <span class="nc">META</span>

<span class="k">type</span> <span class="nc">Trade</span> <span class="p">=</span> <span class="p">{</span>
        <span class="n">buyOrSell</span><span class="p">:</span> <span class="nc">Transaction</span>
        <span class="n">ticker</span><span class="p">:</span> <span class="nc">Stocks</span>
        <span class="n">numShares</span><span class="p">:</span> <span class="kt">int</span>
        <span class="n">price</span><span class="p">:</span> <span class="n">decimal</span>
        <span class="n">allOrNone</span><span class="p">:</span> <span class="kt">bool</span> <span class="p">}</span></code></pre></figure>

<p>And this is what a list of trades would look like:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="p">(</span><span class="n">trades</span><span class="p">:</span> <span class="nc">Trade</span> <span class="kt">list</span><span class="p">)</span> <span class="p">=</span> 
  <span class="p">[</span>
    <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Buy</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="nc">MSFT</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="mi">258</span><span class="p">.</span><span class="mi">32</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="o">};</span>
    <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="nc">META</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="mi">158</span><span class="p">.</span><span class="mi">71</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="o">};</span>
    <span class="p">{</span><span class="n">buyOrSell</span> <span class="p">=</span> <span class="nc">Sell</span><span class="p">;</span> <span class="n">ticker</span> <span class="p">=</span> <span class="nc">GOOGL</span><span class="p">;</span> <span class="n">numShares</span> <span class="p">=</span> <span class="mi">6</span><span class="p">;</span> <span class="n">price</span> <span class="p">=</span> <span class="mi">106</span><span class="p">.</span><span class="mi">08</span><span class="n">m</span><span class="p">;</span> <span class="n">allOrNone</span><span class="p">=</span><span class="bp">true</span><span class="o">};</span>    
  <span class="p">]</span></code></pre></figure>

<h2 id="trade-module">Trade Module</h2>

<p>We will use the following functions throughout the remainder of this series. The last function <code class="language-plaintext highlighter-rouge">tradeMany</code> will be used to process an order (i.e. a list of Trades).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">module</span> <span class="nc">Trade</span> <span class="p">=</span> 

  <span class="k">let</span> <span class="n">buyOne</span> <span class="n">order</span> <span class="p">=</span> 
    <span class="k">let</span> <span class="n">totalPrice</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">price</span> <span class="p">*</span> <span class="n">decimal</span><span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">numShares</span><span class="p">)</span>
    <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just purchased {order.numShares} shares of {order.ticker} for a total cost of ${totalPrice:N2}."</span> 
    <span class="o">(-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="n">m</span> <span class="p">*</span> <span class="n">totalPrice</span><span class="p">)</span>

  <span class="k">let</span> <span class="n">sellOne</span> <span class="n">order</span> <span class="p">=</span> 
    <span class="k">let</span> <span class="n">totalPrice</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">price</span> <span class="p">*</span> <span class="n">decimal</span><span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">numShares</span><span class="p">)</span>
    <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just sold {order.numShares} shares of {order.ticker} for a total earnings of ${totalPrice:N2}."</span> 
    <span class="n">totalPrice</span>

  <span class="k">let</span> <span class="n">tradeOne</span> <span class="n">order</span> <span class="p">=</span>   
    <span class="k">match</span> <span class="n">order</span><span class="p">.</span><span class="n">buyOrSell</span> <span class="k">with</span>
    <span class="p">|</span> <span class="nc">Buy</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">buyOne</span> <span class="n">order</span><span class="p">)</span>          
    <span class="p">|</span> <span class="nc">Sell</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">sellOne</span> <span class="n">order</span><span class="p">)</span>

  <span class="k">let</span> <span class="n">tradeMany</span> <span class="n">order</span> <span class="p">=</span> 
    <span class="k">let</span> <span class="n">totalOrderPrice</span> <span class="p">=</span> 
      <span class="n">order</span>
      <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">tradeOne</span>
      <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">sum</span>
    <span class="n">printfn</span> <span class="o">$</span><span class="s2">"-------------------------------------------------------------------"</span>
    <span class="k">match</span> <span class="p">(</span><span class="n">totalOrderPrice</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="n">m</span><span class="p">)</span> <span class="k">with</span>
    <span class="p">|</span> <span class="bp">true</span> <span class="p">-&gt;</span> <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just executed a series of trades that earned you ${totalOrderPrice:N2}."</span>
    <span class="p">|</span> <span class="bp">false</span> <span class="p">-&gt;</span> <span class="n">printfn</span> <span class="o">$</span><span class="s2">"You just executed a series of trades that cost you ${totalOrderPrice:N2}."</span></code></pre></figure>

<p>And this is the output if you run <code class="language-plaintext highlighter-rouge">Trade.tradeMany trades</code>:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">You just purchased 4 shares of MSFT for a total cost of $</span>1,033.28.
<span class="gp">You just sold 3 shares of META for a total earnings of $</span>476.13.
<span class="gp">You just sold 6 shares of GOOGL for a total earnings of $</span>636.48.
<span class="go">-------------------------------------------------------------------
</span><span class="gp">You just executed a series of trades that earned you $</span>79.33.</code></pre></figure>

<p>The code listing for this series can be found <a href="https://github.com/dlfelps/dsl-examples">here</a>.</p>

<h2 id="next">Next</h2>

<p>In the next post we will see how to use F# <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions">computation expressions</a> to create identical <code class="language-plaintext highlighter-rouge">Trade</code> records.</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Justin Lubin. 2021. How Statically-Typed Functional Programmers Author Code. In Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems (CHI EA ‘21). Association for Computing Machinery, New York, NY, USA, Article 484, 1–6. https://doi.org/10.1145/3411763.3451515 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="dsl" /><category term="ddd" /><summary type="html"><![CDATA[The first post in the domain specific language series explores the basics of domain modeling using record types in F#.]]></summary></entry><entry><title type="html">Experiment 05</title><link href="https://dlfelps.github.io/2022/09/01/List-vs-Seq.html" rel="alternate" type="text/html" title="Experiment 05" /><published>2022-09-01T00:00:00+00:00</published><updated>2022-09-01T00:00:00+00:00</updated><id>https://dlfelps.github.io/2022/09/01/List-vs-Seq</id><content type="html" xml:base="https://dlfelps.github.io/2022/09/01/List-vs-Seq.html"><![CDATA[<p>When should you store data as a list, sequence, or an array? This post explains why you need all three in F#.</p>

<h2 id="introduction">Introduction</h2>

<p>Lists, sequences, and arrays appear interchangeable on the surface - they are all linear collections of elements of the same type. But the architects of F# included all three with good reason. This post explores some of the situations that make each type shine, and dives into the tradeoffs you make when you select one collection over another<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Let’s start with Microsoft’s official definitions:</p>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/arrays">Arrays</a> are fixed-size, zero-based, mutable collections of consecutive data elements that are all of the same type.</li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lists">Lists</a> are ordered, immutable series of elements of the same type.</li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/sequences">Sequences</a> are logical series of elements all of one type.</li>
</ul>

<p>Those definitions are certainly similar, but there are some differences. Next we will compare their syntax.</p>

<p>Basic collections can be created as follows:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">list1</span> <span class="p">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="p">]</span>
<span class="k">let</span> <span class="n">array1</span> <span class="p">=</span> <span class="p">[|</span> <span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="p">|]</span>
<span class="k">let</span> <span class="n">seq1</span> <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="p">}</span></code></pre></figure>

<p>All three collections also support programmatic creation:</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">listOfSquares</span> <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span> <span class="mi">10</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">]</span>
<span class="k">let</span> <span class="n">arrayOfSquares</span> <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span> <span class="mi">10</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">|]</span>
<span class="k">let</span> <span class="n">seqOfSquares</span> <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span> <span class="mi">10</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">}</span></code></pre></figure>

<p>The syntax is well-designed - different, but familiar. Now let’s dive into our first scenario.</p>

<h2 id="scenario-1-create-new-collection">Scenario 1 (create new collection)</h2>

<p>This is the most basic scenario - creating a collection. We will use the following timing code (across all scenarios) to capture the performance of individual actions. The action is measured multiple times for multiple trials and a confidence interval is reported in milliseconds.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Stats</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Diagnostics</span>

<span class="k">let</span> <span class="n">extractCI</span> <span class="p">(</span><span class="n">ci</span><span class="p">:</span><span class="nn">Intervals</span><span class="p">.</span><span class="nc">Interval</span><span class="p">&lt;</span><span class="kt">float</span><span class="o">&gt;)</span> <span class="p">=</span> 
  <span class="k">match</span> <span class="n">ci</span> <span class="k">with</span> 
  <span class="p">|</span> <span class="nn">Intervals</span><span class="p">.</span><span class="nc">ClosedInterval</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="o">((</span><span class="n">b</span><span class="p">-</span><span class="n">a</span><span class="o">)/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="o">+</span><span class="n">a</span><span class="o">,(</span><span class="n">b</span><span class="p">-</span><span class="n">a</span><span class="o">)/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
  <span class="p">|</span> <span class="nn">Intervals</span><span class="p">.</span><span class="nc">Empty</span> <span class="p">-&gt;</span> <span class="o">(-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>  

<span class="k">let</span> <span class="n">calculateCI</span> <span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="n">int64</span> <span class="kt">array</span><span class="p">)</span> <span class="p">=</span> 
  <span class="n">times</span>
  <span class="p">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">toSeq</span>
  <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="p">(</span><span class="k">fun</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
  <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">ConfidenceInterval</span><span class="p">.</span><span class="n">ci</span> <span class="mi">0</span><span class="p">.</span><span class="mi">95</span><span class="p">)</span>
  <span class="p">|&gt;</span> <span class="n">extractCI</span>

<span class="k">let</span> <span class="n">timeIt</span> <span class="n">numTrials</span> <span class="n">numRuns</span> <span class="n">action</span> <span class="p">=</span>
  
  <span class="k">let</span> <span class="n">times</span><span class="p">:</span> <span class="n">int64</span> <span class="kt">array</span> <span class="p">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">zeroCreate</span> <span class="n">outer</span>

  <span class="k">for</span> <span class="n">o</span> <span class="p">=</span> <span class="mi">0</span> <span class="k">to</span> <span class="p">(</span><span class="n">outer</span><span class="p">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> 
    <span class="n">printf</span> <span class="s2">"%d</span><span class="se">\n</span><span class="s2">"</span> <span class="n">o</span>

    <span class="k">let</span> <span class="n">timer</span> <span class="p">=</span> <span class="nc">Stopwatch</span> <span class="bp">()</span>
    <span class="n">timer</span><span class="p">.</span><span class="nc">Start</span><span class="bp">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="p">=</span> <span class="mi">0</span> <span class="k">to</span> <span class="p">(</span><span class="n">inner</span><span class="p">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">action</span> <span class="bp">()</span> <span class="p">|&gt;</span> <span class="n">ignore</span>
    <span class="n">timer</span><span class="p">.</span><span class="nc">Stop</span><span class="bp">()</span>

    <span class="n">times</span><span class="p">[</span><span class="n">o</span><span class="p">]</span> <span class="p">&lt;-</span> <span class="n">timer</span><span class="p">.</span><span class="nc">ElapsedMilliseconds</span>
  <span class="n">calculateCI</span> <span class="n">times</span></code></pre></figure>

<p>Next we list the code to create the collections and calculate performance. The <code class="language-plaintext highlighter-rouge">timeIt</code> command takes three parameters: number of trials (10), number of runs per trial (1000), and a function with signature <code class="language-plaintext highlighter-rouge">unit -&gt; collectionType&lt;T&gt;</code> (e.g. createList has signature <code class="language-plaintext highlighter-rouge">unit -&gt; list&lt;int&gt;</code>).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">createList</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span>
<span class="k">let</span> <span class="n">createSeq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span>
<span class="k">let</span> <span class="n">createArray</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">createList</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">createSeq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">createArray</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result1_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result1_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result1_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-4abff5"></style></head>
    <body>
      <div id="256d9ddf-22e2-493b-8251-8a12b0dfe86e" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-4abff5"><g class="clips"><clippath id="clip4abff5xyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clip4abff5x"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clip4abff5y"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clip4abff5xy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,438.41)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,381.57)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,324.73)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,267.88)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,211.04000000000002)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,154.2)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"><path class="yzl zl crisp" transform="translate(0,495.25)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 2px;"></path></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clip4abff5xyplot)"><g class="scatterlayer mlayer"><g class="trace scatter tracecf04fc" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,21h8m-4,0V87.4m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,395.25h8m-4,0V395.25m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,104.49h8m-4,0V167.62m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,54.2)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,395.25)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,136.05)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="0" data-math="N" transform="translate(0,495.25)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">0</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="5" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,438.41)">5</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="10" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,381.57)">10</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="15" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,324.73)">15</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="20" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,267.88)">20</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="25" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,211.04000000000002)">25</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="30" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,154.2)">30</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-4abff5"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,38.934375,310)" x="38.934375" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-4abff5" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_256d9ddf22e2493b82518a12b0dfe86e = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[30.0,0.0,22.8],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.9204314277830594,0.0,2.7767145029408837]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('256d9ddf-22e2-493b-8251-8a12b0dfe86e', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_256d9ddf22e2493b82518a12b0dfe86e();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_256d9ddf22e2493b82518a12b0dfe86e();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Arrays were created marginally faster than lists, but it appears that sequences were created almost instantaneously. Well that isn’t 100% true - sequences are <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lazy-expressions">lazy</a>, which means that they aren’t evaluated until they are needed. And since the code never used the sequence it was never actually created. In the next scenario we will <em>use</em> the elements.</p>

<h2 id="scenario-2-sequential-access">Scenario 2 (sequential access)</h2>

<p>This scenario measures the performance of a common use for data structures - sequential access. Sequential access occurs when you access elements in a predetermined, ordered sequence (e.g. iterating through the elements in a <code class="language-plaintext highlighter-rouge">for</code> loop).</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">sumSequential</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">e</span> <span class="k">in</span> <span class="n">lst</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">e</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumList</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="n">sumSequential</span>
<span class="k">let</span> <span class="n">sumSeq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">|&gt;</span> <span class="n">sumSequential</span>
<span class="k">let</span> <span class="n">sumArray</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span> <span class="p">|&gt;</span> <span class="n">sumSequential</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumList</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumSeq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumArray</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result2_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result2_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result2_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-9ba216"></style></head>
    <body>
      <div id="7d25a429-d066-4138-84c0-56a5364f1f99" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-9ba216"><g class="clips"><clippath id="clip9ba216xyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clip9ba216x"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clip9ba216y"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clip9ba216xy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,500.71)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,446.67)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,392.62)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,338.57)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,284.52)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,230.48)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,176.43)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,122.38)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clip9ba216xyplot)"><g class="scatterlayer mlayer"><g class="trace scatter trace4a67af" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,21h8m-4,0V131.86m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,342.97h8m-4,0V399m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,255.28h8m-4,0V324.56m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,76.43)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,370.99)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,289.92)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="22" data-math="N" transform="translate(0,500.71)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">22</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="24" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,446.67)">24</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="26" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,392.62)">26</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="28" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,338.57)">28</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="30" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,284.52)">30</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="32" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,230.48)">32</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="34" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,176.43)">34</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="36" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,122.38)">36</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-9ba216"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,38.934375,310)" x="38.934375" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-9ba216" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_7d25a429d066413884c056a5364f1f99 = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[34.0,23.1,26.1],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.0512436221381147,1.0366503196701657,1.2818886588017158]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('7d25a429-d066-4138-84c0-56a5364f1f99', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_7d25a429d066413884c056a5364f1f99();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_7d25a429d066413884c056a5364f1f99();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Sequences had the fastest time, followed by array and list respectively. Given that there are only a few milliseconds between the conditions and each condition includes 1000 repetitions, the difference for a single execution is only a few microseconds - hardly worth optimizing in my opinion.</p>

<p><em>NOTE: the times above include the time to create a collection PLUS the time to sum its elements. I included the time to create the collection so that times could be better compared across scenarios; this will be true for all following scenarios.</em></p>

<h2 id="scenario-3-random-access">Scenario 3 (random access)</h2>

<p>The third scenario measures the performance of a collection with respect to its ability to perform random access (sometimes called direct access). Random access is the ability to access an arbitrary element of a sequence.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/Random_vs_sequential_access.svg" alt="Sequential vs Random access" title="Sequential vs Random access" /></p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">sumListRandomAccess</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">25</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lst</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">item</span> <span class="p">(</span><span class="mi">40</span><span class="p">*</span><span class="n">i</span><span class="o">))</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumSeqRandomAccess</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">25</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lst</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">item</span> <span class="p">(</span><span class="mi">40</span><span class="p">*</span><span class="n">i</span><span class="o">))</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumArrayRandomAccess</span> <span class="n">lst</span> <span class="p">=</span> 
  <span class="k">let</span> <span class="k">mutable</span> <span class="n">sum</span> <span class="p">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">25</span> <span class="k">do</span>
    <span class="n">sum</span> <span class="p">&lt;-</span> <span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lst</span> <span class="p">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">item</span> <span class="p">(</span><span class="mi">40</span><span class="p">*</span><span class="n">i</span><span class="o">))</span>
  <span class="n">sum</span>

<span class="k">let</span> <span class="n">sumList</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="n">sumListRandomAccess</span>
<span class="k">let</span> <span class="n">sumSeq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">|&gt;</span> <span class="n">sumSeqRandomAccess</span>
<span class="k">let</span> <span class="n">sumArray</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span> <span class="p">|&gt;</span> <span class="n">sumArrayRandomAccess</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumList</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumSeq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">sumArray</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result3_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result3_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result3_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-67eaea"></style></head>
    <body>
      <div id="7504a926-d870-436f-aaeb-bec9481da118" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-67eaea"><g class="clips"><clippath id="clip67eaeaxyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clip67eaeax"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clip67eaeay"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clip67eaeaxy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,430.66)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,329.74)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,228.82)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,127.91)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clip67eaeaxyplot)"><g class="scatterlayer mlayer"><g class="trace scatter trace442fae" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,331.99h8m-4,0V341.85m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,21h8m-4,0V51.36m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,391.52h8m-4,0V398.98m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,336.92)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,36.18)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,395.25)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="50" data-math="N" transform="translate(0,430.66)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">50</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="100" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,329.74)">100</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="150" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,228.82)">150</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="200" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,127.91)">200</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-67eaea"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,31.309375000000003,310)" x="31.309375000000003" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-67eaea" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_7504a926d870436faaebbec9481da118 = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[46.9,195.9,18.0],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.4422444309661486,7.52126861364431,1.8470430124264041]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('7504a926-d870-436f-aaeb-bec9481da118', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_7504a926d870436faaebbec9481da118();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_7504a926d870436faaebbec9481da118();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Here we see the main reason to avoid sequences - they have terrible random access times. Arrays are faster than lists, but you must know how many elements they will contain at compile time.</p>

<h2 id="scenario-4-search-and-count">Scenario 4 (search and count)</h2>

<p>In this scenario I implement a common processing task - count the number of occurrences of a target element in a given collection. In the code below, the target element is <code class="language-plaintext highlighter-rouge">5</code>.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">count5List</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="p">(</span><span class="k">fun</span> <span class="n">elem</span> <span class="p">-&gt;</span> <span class="n">elem</span> <span class="p">=</span> <span class="mi">5</span><span class="o">))</span> <span class="p">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">count5Seq</span> <span class="bp">()</span>  <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="p">(</span><span class="k">fun</span> <span class="n">elem</span> <span class="p">-&gt;</span> <span class="n">elem</span> <span class="p">=</span> <span class="mi">5</span><span class="o">))</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">count5Array</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">|]</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">filter</span> <span class="p">(</span><span class="k">fun</span> <span class="n">elem</span> <span class="p">-&gt;</span> <span class="n">elem</span> <span class="p">=</span> <span class="mi">5</span><span class="o">))</span> <span class="p">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span>

<span class="k">let</span> <span class="n">listCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">count5List</span>
<span class="k">let</span> <span class="n">seqCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">count5Seq</span>
<span class="k">let</span> <span class="n">arrayCI</span> <span class="p">=</span> <span class="n">timeIt</span> <span class="mi">10</span> <span class="mi">1000</span> <span class="n">count5Array</span></code></pre></figure>

<p>And the results:</p>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
        <!-- Plotly.js -->
        <meta http-equiv="X-UA-Compatible" content="IE=11" />
        <script src="./result4_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-global"></style>
        
        <style>
        .container {
          padding-right: 25px;
          padding-left: 25px;
          margin-right: 0 auto;
          margin-left: 0 auto;
        }
        @media (min-width: 768px) {
          .container {
            width: 750px;
          }
        }
        @media (min-width: 992px) {
          .container {
            width: 970px;
          }
        }
        @media (min-width: 1200px) {
          .container {
            width: 1170px;
          }
        }
        </style>
    <script src="./result4_files/require.min.js.download"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="fsharp-plotly" data-requiremodule="plotly" src="./result4_files/plotly-2.6.3.min.js.download"></script><style id="plotly.js-style-modebar-db0b89"></style></head>
    <body>
      <div id="d9344cd5-2e42-40d7-871e-e79075064f5d" class="js-plotly-plot"><!-- Plotly chart will be drawn inside this DIV --><div class="plot-container plotly"><div class="user-select-none svg-container" style="position: relative; width: 600px; height: 600px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600" style="background: rgb(255, 255, 255);"><defs id="defs-db0b89"><g class="clips"><clippath id="clipdb0b89xyplot" class="plotclip"><rect width="440" height="420"></rect></clippath><clippath class="axesclip" id="clipdb0b89x"><rect x="80" y="0" width="440" height="600"></rect></clippath><clippath class="axesclip" id="clipdb0b89y"><rect x="0" y="100" width="600" height="420"></rect></clippath><clippath class="axesclip" id="clipdb0b89xy"><rect x="80" y="100" width="440" height="420"></rect></clippath></g><g class="gradients"></g><g class="patterns"></g></defs><g class="bglayer"><rect class="bg" x="80" y="100" width="440" height="420" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="100" width="440" height="420" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="520" y="80" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="520" y="520" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124" y="520.5" width="352" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="476" y="520.5" width="44" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="142" width="20" height="336" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="478" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="100" width="20" height="42" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(105.75,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(300,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(494.25,0)" d="M0,100v420" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,462.35)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,400.22)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,338.09000000000003)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,275.96000000000004)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,213.82999999999998)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,151.7)" d="M80,0h440" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80,100)" clip-path="url(#clipdb0b89xyplot)"><g class="scatterlayer mlayer"><g class="trace scatter trace80771f" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"><g class="errorbar"><path class="yerror" d="M21.75,21h8m-4,0V163.18m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M216,118.48h8m-4,0V239.66m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g><g class="errorbar"><path class="yerror" d="M410.25,251.15h8m-4,0V399m-4,0h8" style="vector-effect: non-scaling-stroke; stroke-width: 2px; stroke: rgb(99, 110, 250); stroke-opacity: 1;"></path></g></g><g class="lines"></g><g class="points"><path class="point" transform="translate(25.75,92.09)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(220,179.07)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path><path class="point" transform="translate(414.25,325.07)" d="M3,0A3,3 0 1,1 0,-3A3,3 0 0,1 3,0Z" style="opacity: 1; stroke-width: 0px; fill: rgb(99, 110, 250); fill-opacity: 1;"></path></g><g class="text"></g></g></g></g><g class="overplot"></g><path class="xlines-above crisp" d="M0,0" style="fill: none;"></path><path class="ylines-above crisp" d="M0,0" style="fill: none;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="list" data-math="N" transform="translate(105.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">list</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="seq" data-math="N" transform="translate(300,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">seq</text></g><g class="xtick"><text text-anchor="middle" x="0" y="533" data-unformatted="array" data-math="N" transform="translate(494.25,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">array</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="22" data-math="N" transform="translate(0,462.35)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;">22</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="24" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,400.22)">24</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="26" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,338.09000000000003)">26</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="28" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,275.96000000000004)">28</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="30" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,213.82999999999998)">30</text></g><g class="ytick"><text text-anchor="end" x="79" y="4.199999999999999" data-unformatted="32" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre; opacity: 1;" transform="translate(0,151.7)">32</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="smithlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="iciclelayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><defs id="topdefs-db0b89"><g class="clips"></g></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="g-gtitle"></g><g class="g-xtitle"><text class="xtitle" x="300" y="560.8" text-anchor="middle" data-unformatted="Collection type" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Collection type</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,38.934375,310)" x="38.934375" y="310" text-anchor="middle" data-unformatted="Performance (ms)" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Performance (ms)</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-db0b89" class="modebar modebar--hover ease-bg"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Box Select" data-attr="dragmode" data-val="select" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Lasso Select" data-attr="dragmode" data-val="lasso" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1031 1000" class="icon" height="1em" width="1em"><path d="m1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="600"><g class="hoverlayer"></g></svg></div></div></div>
<script type="text/javascript">

            var renderPlotly_d9344cd52e4240d7871ee79075064f5d = function() {
            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-2.6.3.min'}}) || require;
            fsharpPlotlyRequire(['plotly'], function(Plotly) {

            var data = [{"type":"scatter","mode":"markers","x":["list","seq","array"],"y":[30.7,27.9,23.2],"marker":{},"line":{},"error_y":{"symmetric":true,"array":[2.288396100060293,1.9503584791198811,2.379748452460955]}}];
            var layout = {"width":600,"height":600,"template":{"layout":{"title":{"x":0.05},"font":{"color":"rgba(42, 63, 95, 1.0)"},"paper_bgcolor":"rgba(255, 255, 255, 1.0)","plot_bgcolor":"rgba(229, 236, 246, 1.0)","autotypenumbers":"strict","colorscale":{"diverging":[[0.0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1.0,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"hovermode":"closest","hoverlabel":{"align":"left"},"coloraxis":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"geo":{"showland":true,"landcolor":"rgba(229, 236, 246, 1.0)","showlakes":true,"lakecolor":"rgba(255, 255, 255, 1.0)","subunitcolor":"rgba(255, 255, 255, 1.0)","bgcolor":"rgba(255, 255, 255, 1.0)"},"mapbox":{"style":"light"},"polar":{"bgcolor":"rgba(229, 236, 246, 1.0)","radialaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""},"angularaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","ticks":""}},"scene":{"xaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"yaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true},"zaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","gridwidth":2.0,"zerolinecolor":"rgba(255, 255, 255, 1.0)","backgroundcolor":"rgba(229, 236, 246, 1.0)","showbackground":true}},"ternary":{"aaxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"baxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"caxis":{"ticks":"","linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)"},"bgcolor":"rgba(229, 236, 246, 1.0)"},"xaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"yaxis":{"title":{"standoff":15},"ticks":"","automargin":true,"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","zerolinecolor":"rgba(255, 255, 255, 1.0)","zerolinewidth":2.0},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"shapedefaults":{"line":{"color":"rgba(42, 63, 95, 1.0)"}},"colorway":["rgba(99, 110, 250, 1.0)","rgba(239, 85, 59, 1.0)","rgba(0, 204, 150, 1.0)","rgba(171, 99, 250, 1.0)","rgba(255, 161, 90, 1.0)","rgba(25, 211, 243, 1.0)","rgba(255, 102, 146, 1.0)","rgba(182, 232, 128, 1.0)","rgba(255, 151, 255, 1.0)","rgba(254, 203, 82, 1.0)"]},"data":{"bar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"error_x":{"color":"rgba(42, 63, 95, 1.0)"},"error_y":{"color":"rgba(42, 63, 95, 1.0)"}}],"barpolar":[{"marker":{"line":{"color":"rgba(229, 236, 246, 1.0)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"carpet":[{"aaxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"},"baxis":{"linecolor":"rgba(255, 255, 255, 1.0)","gridcolor":"rgba(255, 255, 255, 1.0)","endlinecolor":"rgba(42, 63, 95, 1.0)","minorgridcolor":"rgba(255, 255, 255, 1.0)","startlinecolor":"rgba(42, 63, 95, 1.0)"}}],"choropleth":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"heatmap":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}}}],"histogram2d":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"colorbar":{"outlinewidth":0.0,"ticks":""}}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"pie":[{"automargin":true}],"scatter":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatter3d":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}},"line":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0.0,"ticks":""}}}],"surface":[{"colorbar":{"outlinewidth":0.0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"table":[{"cells":{"fill":{"color":"rgba(235, 240, 248, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}},"header":{"fill":{"color":"rgba(200, 212, 227, 1.0)"},"line":{"color":"rgba(255, 255, 255, 1.0)"}}}]}},"xaxis":{"title":{"text":"Collection type"}},"yaxis":{"title":{"text":"Performance (ms)"}}};
            var config = {"responsive":true};
            Plotly.newPlot('d9344cd5-2e42-40d7-871e-e79075064f5d', data, layout, config);
});
            };
            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {
                var script = document.createElement("script");
                script.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js");
                script.onload = function(){
                    renderPlotly_d9344cd52e4240d7871ee79075064f5d();
                };
                document.getElementsByTagName("head")[0].appendChild(script);
            }
            else {
                renderPlotly_d9344cd52e4240d7871ee79075064f5d();
            }
</script>

      
    
<svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg></body></html>

<p>Similar to the results of <a href="#scenario-2-sequential-access">Scenario 2</a>, the difference here is not really worth optimizing.</p>

<h2 id="scenario-5-pattern-match-and-recursion">Scenario 5 (pattern match and recursion)</h2>

<p>Pattern matching is one of my favorite pieces of F# syntax. Besides being extremely readable, the F# compiler will ensure that the patterns check all possible cases. When it comes to processing collections, however, you must use lists to enjoy the full power of pattern matching. Lists are also the only collection that can be used with recursive functions. The example below restates the <code class="language-plaintext highlighter-rouge">count5</code> problem from Scenario 4 using a recursive function with pattern matching.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="k">rec</span> <span class="n">countMatch</span> <span class="n">target</span> <span class="n">sumSoFar</span> <span class="n">lst</span>  <span class="p">=</span> 
  <span class="k">match</span> <span class="n">lst</span> <span class="k">with</span>
  <span class="p">|</span> <span class="bp">[]</span> <span class="p">-&gt;</span> <span class="n">sumSoFar</span>
  <span class="p">|</span> <span class="n">head</span> <span class="p">::</span> <span class="n">tail</span> <span class="p">-&gt;</span> <span class="k">if</span> <span class="n">head</span> <span class="p">=</span> <span class="n">target</span> <span class="k">then</span> <span class="n">countMatch</span> <span class="n">target</span> <span class="p">(</span><span class="n">sumSoFar</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="n">tail</span> <span class="k">else</span> <span class="n">countMatch</span> <span class="n">target</span> <span class="n">sumSoFar</span> <span class="n">tail</span>


<span class="k">let</span> <span class="n">count5List</span> <span class="bp">()</span>  <span class="p">=</span> <span class="p">[</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">1000</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="p">]</span> <span class="p">|&gt;</span> <span class="p">(</span><span class="n">countMatch</span> <span class="mi">5</span> <span class="mi">0</span><span class="p">)</span></code></pre></figure>

<p>(This function only works for lists and is about 3 times slower than the equivalent function for lists from Scenario 4.)</p>

<h2 id="scenario-6-interoperability">Scenario 6 (interoperability)</h2>

<p>In my opinion the final scenario describes the most important criteria for selecting a collection - interoperability. Sequences are represented by the <code class="language-plaintext highlighter-rouge">seq&lt;T&gt;</code> type, which is an alias for <code class="language-plaintext highlighter-rouge">IEnumerable&lt;T&gt;</code>. Therefore, any .NET type that implements <code class="language-plaintext highlighter-rouge">IEnumerable&lt;T&gt;</code> interface can be used as a sequence. I actually used this convenience in <a href="#scenario-2-sequential-access">Scenario 2</a> to create the <code class="language-plaintext highlighter-rouge">sumSequential</code> function - its inferred type is <code class="language-plaintext highlighter-rouge">seq&lt;int&gt; -&gt; int</code>. So you can use <code class="language-plaintext highlighter-rouge">Seq.length</code> to calculate the number of elements in sequences, lists, or arrays.</p>

<figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="n">testSeq</span> <span class="p">=</span> <span class="n">seq</span> <span class="p">{</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">}</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">testList</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">]</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
<span class="k">let</span> <span class="n">testArray</span> <span class="p">=</span> <span class="p">[|</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">|]</span> <span class="p">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span></code></pre></figure>

<p>For this reason, it is recommended to accept sequences in public facing functions (i.e. those that will be imported by other .NET projects). But that doesn’t mean you should only use sequences in libraries - if you need to perform pattern matching you can always convert the input sequence to a list<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope that this post has helped you get a better feel for collections in F#. I will end this post with a flowchart that you can use to guide you if you are having trouble.</p>

<p><img src="/assets/images/mermaid-diagram-2022-09-07-063841.svg" alt="Collection flow diagram" title="Collection flow diagram" /></p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>F# has specialized collection types that are designed from a functional programming perspective rather than an object-oriented perspective (compare with those found in System.Collections.Generic). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>It is always possible to convert to and from any collection type. For example, you can convert a list <strong>to</strong> a sequence using <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#toSeq"><code class="language-plaintext highlighter-rouge">List.toSeq</code></a>. Conversely, you can create a list <strong>from</strong> a sequence using <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#ofSeq"><code class="language-plaintext highlighter-rouge">List.ofSeq</code></a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Daniel Felps</name><email>dlfelps@gmail.com</email></author><category term="net" /><category term="list" /><category term="seq" /><category term="collections" /><summary type="html"><![CDATA[When should you store data as a list, sequence, or an array? This post explains why you need all three in F#.]]></summary></entry></feed>